const UAS_HDLD_TRAUMAKIT = "trk";

class UaS_TraumaKit : UaS_MedicalTool {
	string statusMessage;

	Default {
		radius 4;
		height 4;
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.PickupMessage "$PICKUP_TRK";
		Inventory.Icon "UGSIF0";
		Inventory.PickupSound "weapons/pocket";
		+INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
		+WEAPON.NO_AUTO_SWITCH;
		+hdweapon.fitsinbackpack;
		//+WEAPON.NOAUTOFIRE;
		weapon.slotpriority 0.5;
		hdweapon.refid UAS_HDLD_TRAUMAKIT;
		scale 0.5;
		tag "$TAG_TRAUMAKIT";
	}

	override double weaponbulk(){
		double b = 0;
		b += (weaponstatus[TKS_PAINKILLER] / 20) * (ENC_STIMPACK * 0.4);
		b += (weaponstatus[TKS_SALINE] / 1000) * (ENC_STIMPACK * 2 * 0.8);
		b += (weaponstatus[TKS_BIOFOAM] / 250) * (6 * 0.6);
		b += (weaponstatus[TKS_STAPLES] / 25) * (6 * 0.1);
		b = max(b, 15);
		return b;
	}

	states {
		spawn:
			UGSI F -1;
			stop;
	}

	override void DoEffect() {
		if (!(owner.player.readyweapon is 'UaS_TraumaKit')) { return; }
		statusMessage = ""; // This is used for tools to display stuff

		Super.DoEffect();
		SetHelpText();
		CycleWounds();
		CycleTools();
		HandleSupplies();

		switch (weaponstatus[TK_SELECTED]) {
			case T_PAINKILLER:
				HandlePainkiller();
				break;
			case T_SALINE:
				HandleSaline();
				break;
			case T_FORCEPS:
				HandleForceps();
				break;
			case T_BIOFOAM:
				HandleBiofoam();
				break;
			case T_STAPLER:
				HandleStapler();
				break;
			case T_SUTURES:
				HandleSutures();
				break;
			case T_SCALPEL:
				HandleScalpel();
				break;
			default:
				weaponstatus[TK_SELECTED] = min(weaponstatus[TK_SELECTED], T_SCALPEL);
				weaponstatus[TK_SELECTED] = max(weaponstatus[TK_SELECTED], 0);
				break;
		}

		HandleBandages();
		TickMessages();
	}

	void TickMessages() {
		// Tick down transient messages
		if (currentmessage.timeout > 0) {
			statusmessage = statusmessage..currentmessage.text;
			currentmessage.timeout--;
		}
	}

	void CycleWounds() {
		if (
			mti.wh.critwounds.Size() == 0
			|| !mti.PressedKey(mti.KEY_FIREMODE, false)
		) { return; }
		if (mti.PressedKey(mti.KEY_CYCLENEXT, true)) { mti.UpdateCurrentWound(mti.currentWoundIdx + 1); }
		else if (mti.PressedKey(mti.KEY_CYCLEPREV, true)) { mti.UpdateCurrentWound(mti.currentWoundIdx - 1); }
	}

	void CycleTools(int set = -1) {
		if (set != -1) { weaponstatus[TK_SELECTED] = set; return; }
		if (!mti.PressedKey(mti.KEY_FIREMODE, false)) {
			if (mti.PressedKey(mti.KEY_CYCLENEXT, true)) {
				weaponstatus[TK_SELECTED] = (weaponstatus[TK_SELECTED] + 1) % 7;
				weaponstatus[TK_HOLD] = 0;
				currentmessage.text = "";
				currentmessage.timeout = 0;
			}
			else if (mti.PressedKey(mti.KEY_CYCLEPREV, true)) {
				weaponstatus[TK_SELECTED] = (weaponstatus[TK_SELECTED] - 1);
				if(weaponstatus[TK_SELECTED] < 0) { weaponstatus[TK_SELECTED] = 6; }
				weaponstatus[TK_HOLD] = 0;
				currentmessage.text = "";
				currentmessage.timeout = 0;
			}
			// wheel
			/*
			if (mti.UaS_Medical_SwitchFiremode.GetBool()) {
				int selected = wheel.GetWheelInput(
					7, (Screen.GetWidth() / 2, Screen.GetHeight() / 2)
				);
				if (selected != -1) { weaponstatus[TK_SELECTED] = selected; }
			}
			*/
		}
	}

	// Somewhat copied from HD, largely rewritten
	bool HandleStrip() {
		string itemname, imperative;
		// check for intervening items, otherwise exit early
		bool isBandaged = (mti.currentWound && mti.currentWound.patched > 0.);
		let blockinv = HDWoundFixer.CheckCovered(mti.patient, CHECKCOV_CHECKBODY);
		if (blockinv) { itemname = blockinv.GetTag(); }
		else if (!HDPlayerPawn.CheckStrip(mti.patient, mti.patient, false)) { itemname = Stringtable.Localize("$UI_TRK_WORNLAYERS"); }
		else if (isBandaged) { itemname = Stringtable.Localize("$UI_TRK_BANDAGE"); }
		else { return true; }

		// check owner or other
		imperative = Stringtable.Localize("$UI_TRK_TAKEOFF_"..((mti.patient == owner)? "YOU" : "THEY"));

		// display message
		currentmessage.text = String.Format(imperative, itemname);
		if (isBandaged) { currentmessage.text = currentmessage.text..Stringtable.Localize("$UI_TRK_BANDAGETIP"); }
		currentmessage.timeout = 2*35;
		return false;
	}

	void HandleBandages() {
		if (!(
			mti.currentWound
			&& mti.currentWound.patched > 0.
			&& owner.player.cmd.buttons & BT_ATTACK
		)) { return; }

		let bandage = UaS_SelfBandage(owner.FindInventory("UaS_SelfBandage"));
		bandage.TryRipBandage();
		if (bandage.currentmessage.text != "") {
			currentmessage.text = bandage.currentmessage.text;
			currentmessage.timeout = bandage.currentmessage.timeout;
		}
	}

	void DebugStatus() {
		if (mti.currentWound) {
			statusmessage = statusmessage.."dirty "..mti.currentWound.dirty.."\n";
			statusmessage = statusmessage.."obstructed "..mti.currentWound.obstructed.."\n";
			statusmessage = statusmessage.."open "..mti.currentWound.open.."\n";
			statusmessage = statusmessage.."cavity "..mti.currentWound.cavity.."\n";
			statusmessage = statusmessage.."infection "..mti.currentWound.infection.."\n";
			statusmessage = statusmessage.."timer "..mti.currentWound.timer.."\n";
		}
		statusMessage = statusMessage.."\n";
		/*
		statusMessage = statusMessage.."Open Wounds "..mti.patient.woundcount.."\n";
		statusMessage = statusMessage.."Unstable Wounds "..mti.patient.unstablewoundcount.."\n";
		*/
		statusMessage = statusMessage.."Old Wounds "..mti.patient.oldwoundcount.."\n";
	}

	enum ToolModes {
		T_PAINKILLER,
		T_SALINE,
		T_FORCEPS,
		T_BIOFOAM,
		T_STAPLER,
		T_SUTURES,
		T_SCALPEL,
	}

	enum KitFlags {
		//standard slots
		TK_SELECTED,
		TK_BUTTON,
		TK_HOLD,
		TK_SCALPEL_CAP,

		//supply slots
		TKS_PAINKILLER,
		TKS_SALINE,
		TKS_BIOFOAM,
		TKS_STAPLES,
	}
}
