class UaS_Looting_Handler : Inventory {
	int cooldown;
	double anglevel, pitchvel;

	default {
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.UNDROPPABLE;
		-INVENTORY.INVBAR;
		+INVENTORY.UNTOSSABLE;
	}

	override void BeginPlay() {
		super.BeginPlay();
		//InitializeLootTables();
		InitializeStrings();
	}

	override void DoEffect() {
		super.DoEffect();
		if (!owner) { return; }
		if (owner.health <= 0) { return; }
		if (!owner.player.ReadyWeapon) { return; }
		if (!(owner.player.ReadyWeapon is "HDFist")) { return; }

		if (TryingToSearch()) {
			FLineTraceData trace;
			owner.LineTrace(owner.angle, 32, owner.pitch, offsetz: (owner.height / 2), data: trace);
			if (trace.HitActor && trace.HitActor.bCorpse) {
				DoSearch(trace.HitActor);
				cooldown = max(cooldown - 1, 0);
			}
		}

		HDPlayerPawn(owner).wephelptext = HDWeapon(owner.player.ReadyWeapon).gethelptext()..
			WEPHELP_USE.."   Crouch next to a body\n      and hold to search.";

		// Nudge owner angle/pitch
		owner.angle += anglevel;
		owner.pitch += pitchvel;
		anglevel *= 0.75;
		pitchvel *= 0.75;
	}

	bool TryingToSearch() {
		return (
			(owner.player.cmd.buttons & BT_USE) &&
			owner.player.CrouchFactor <= 0.5);
	}

	void DoSearch(actor searchTarget) {
		UaS_SearchedCorpseMarker searchMarker;
		if (!searchTarget) { return; }
		if (searchTarget.countinv("UaS_SearchedCorpseMarker") == 0) {
			searchTarget.GiveInventory("UaS_SearchedCorpseMarker", 1);
			searchMarker = UaS_SearchedCorpseMarker(searchTarget.FindInventory("UaS_SearchedCorpseMarker"));
			searchMarker.InitLoot();
		}
		searchMarker = UaS_SearchedCorpseMarker(searchTarget.FindInventory("UaS_SearchedCorpseMarker"));
		if (!searchMarker) { return; }

		//Actually do the search
		if (cooldown == 0) {
			if (searchMarker.fullysearched) {
				HDWeapon currentWeapon = HDWeapon(owner.player.ReadyWeapon);
				if(searchMarker.lastMessage == "") { searchMarker.lastMessage = FlavorText(searchMarker.foundSomething); }
				currentWeapon.A_WeaponMessage(searchMarker.lastMessage);
				return;
			}
			owner.A_StartSound("weapons/pocket", volume: frandom(0.5, 0.75));
			anglevel += frandom[loot](-1, 1);
			pitchvel += frandom[loot](-1, 1);
			cooldown = random[loot](10,25);
			searchMarker.ReturnLoot();
		}
	}
}
