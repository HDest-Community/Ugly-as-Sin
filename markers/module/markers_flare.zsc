const UAS_HDLD_FLARE = "flr";

class UaS_Flare : UaS_Marker {
	DynamicLight FlareLight;
	DynamicLight FlareLight2;
	UaS_Flare DroppedFlare;
	bool burned;
	// int spindir;

	Default {
		Inventory.PickupMessage "$PICKUP_FLARE";
		Inventory.Icon "UGSFA0";
		tag "$TAG_FLARE";
		HDPickup.refid UAS_HDLD_FLARE;
	}

	override void HandleAttachedLight() {
		burned = (brightness - age) < 0;

		if (Activated && !burned) {
			if (owner) {
				owner.A_StartSound("UaS/Flare", 818764, CHANF_LOOPING|CHANF_NOSTOP, volume: 0.15);
				owner.A_SoundVolume(818764, double(brightness - age) / 384.0);
			}
			else {
				A_StartSound("UaS/Flare", 818764, CHANF_LOOPING|CHANF_NOSTOP, volume: 0.15);
				A_SoundVolume(818764, double(brightness - age) / 384.0);
			}
			if (level.maptime % 2 == 0) { frame = 1; } else { frame = 2; }
			brightness = min(brightness + 2, 192);
			if (level.maptime % 40 == 0) { age++; }

			// bright light
			if (!FlareLight) {
				FlareLight = DynamicLight(Actor.Spawn("UaS_FlareLight"));
				FlareLight.args[DynamicLight.LIGHT_RED] = 256;
				FlareLight.args[DynamicLight.LIGHT_GREEN] = 160;
				FlareLight.args[DynamicLight.LIGHT_BLUE] = 192;
			}
			FlareLight.args[DynamicLight.LIGHT_INTENSITY] = int(0.25 * (brightness - age) + random[flare](-4, 4));
			if (owner) { FlareLight.target = owner; }
			else { FlareLight.target = self; }

			// spill light
			if (!FlareLight2) {
				FlareLight2 = DynamicLight(Actor.Spawn("UaS_FlareLight"));
				FlareLight2.args[DynamicLight.LIGHT_RED] = 224;
				FlareLight2.args[DynamicLight.LIGHT_GREEN] = 96;
				FlareLight2.args[DynamicLight.LIGHT_BLUE] = 128;
			}
			FlareLight2.args[DynamicLight.LIGHT_INTENSITY] = (brightness - age) + random[flare](-16, 16);
			if (owner) { FlareLight2.target = owner; }
			else { FlareLight2.target = self; }

			actor pspawn = self;
			if (owner) { pspawn = owner; }
			for (int i = 0; i < 4; i++) {
				double pvel = frandom[flare](1,2) * (double(brightness - age) / 192.0);
				double offz = 0;
				color c = "red";
				if (random[flare](0,1) == 0) { c = "yellow"; }
				if (pspawn != self) { offz = pspawn.height * 0.6; }
				pspawn.A_SpawnParticle(
					c,
					flags: SPF_FULLBRIGHT,
					size: frandom[flare](1,2),
					xoff: frandom(-1,1),
					yoff: frandom(-1,1),
					zoff: frandom(-1,1) + offz,
					velx: pvel * cos(pspawn.angle + frandom[flare](-45,45)),
					vely: pvel * sin(pspawn.angle + frandom[flare](-45,45)),
					velz: pvel * sin(frandom[flare](max(-offz, -45),45)),
					accelz: -0.1,
					startalphaf: 0.5,
					fadestepf: frandom[flare](0.001,0.01),
					sizestep: -0.001
				);
			}
			bFitsInBackpack = false;
		}
		else if (!Activated && !burned) {
			frame = 0;
			if (FlareLight) { FlareLight.Destroy(); }
			if (FlareLight2) { FlareLight2.Destroy(); }
			brightness = 0;
			age = 0;
			bFitsInBackpack = true;
		}
		// Use up when dead?
		else if (Activated && burned) {
			Activated = false;
			frame = 3;
			if (FlareLight) { FlareLight.Destroy(); }
			if (FlareLight2) { FlareLight2.Destroy(); }
			if (owner) {
				Amount--;
				owner.A_StopSound(818764);
			}
			//else { destroy(); }
		}

		// A_SetAngle(angle + vel.length() * 3 * spindir);
	}

	states {
		Spawn:
			UGSF A -1;
			stop;
	}
}

class UaS_FlareLight : DynamicLight {
	override void Tick() {
		super.Tick();
		if (target) {
			SetOrigin((target.pos.x, target.pos.y, target.pos.z + target.height/2), true);
			Prev = target.Prev;
		}
	}
}
