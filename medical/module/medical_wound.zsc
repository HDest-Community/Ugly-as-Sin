// Info about values:
// ------------------
// depth + patched = open (depth only affects whether you actually bleed or not)

class UaS_Wound : HDBleedingWound {
	string description;
	int painkiller;
	int dirty;
	int obstructed;
	int timer;
	int infection;
	int pain;
	int avgstat;

	double open;
	double cavity; // cavity and width can't be the same, as width determines bleedrate
	double stabilised;

	// Bandage related values
	double pressure;
	double tightness;

	// Incap related
	double oldPatched;

	override void Tick() {
		// Heal some old wounds before getting destroyed?
		if (
			age
			&& bleeder
			&& HDPlayerPawn(bleeder)
			&& CheckDestroy()
			&& avgstat < 15
		) {
			let hdp = HDPlayerPawn(bleeder);
			hdp.oldwoundcount = max(hdp.oldwoundcount - random(2, 5), 0);
		}
		Super.Tick();
		if (!bleeder) { return; }

		if (!CheckSkip()) { TryStabilise(); }
		BloodDrops();

		// Make sure bandage doesn't fall off when trying to bandage yourself while incap
		if (HDPlayerPawn(bleeder) && HDIncapWeapon(HDPlayerPawn(bleeder).Player.ReadyWeapon) && pressure <= 0.) {
			float delta = patched - oldPatched;
			if (delta > 0.) { pressure = delta / frandom(1.5, 2.5); }
		}

		// Bandage gets more loose over time
		if (random(0, 1)) {
			int maxIsMoving = 20;
			float maxPressureLoss = 0.00025 + 0.00100 * (bleeder.CountInv("IsMoving") / maxIsMoving);
			pressure = max(pressure - frandom(0, maxPressureLoss), 0);
		}

		if (pressure > 0. && patched <= 0.) { pressure = 0; }
		pressure = min(pressure, 8);

		// depth doesn't really equal to wound being open
		open = depth + patched;

		UpdateAverageStatus();
		timer = max(timer - 1, 0);
		pain = max(pain - 1, 0);
		pain = max(pain - painkiller / 20, 0);

		if (avgstat < 15) { regenrate = (avgstat <= 0)? 0.25 : 0.25 * (15 - avgstat) / 15; }
		else { regenrate = 0; }

		if (timer <= 0) {
			// Metabolize some painkiller
			painkiller = max(painkiller - 1, 0);

			// Infection increases
			/*
			if (toHeal <= (avgstat + infection)) {
				infection = min(infection + 1, 100);
			}
			*/

			timer = random[uas_wi](2,5) * (35 + open);
		}

		oldPatched = patched;
	}

	// If no pressure is being applied, the bandage is too loose and begins to fall off over time.
	override void ComeUndone() {
		if (frandom(0.0, 0.2) <= pressure) { return; }

		pressure = 0;
		depth += patched;
		patched = 0;
	}

	// Natural regeneration :]
	// 2f has does its own regen so we don't really have to worry about it here.
	override void Regenerate() {
		if (depth > 0. || patched > 0.) { Patch(frandom(0.0, 0.2 * regenrate), true); }
		else if (sealed > 0.) { sealed = max(sealed - frandom(0, 0.4 * regenrate), 0); }

		if (cavity > 0.) { cavity = max(cavity - frandom(0.0, 0.2 * regenrate), 0); }

		// Chance to heal status (NOTE: i should change this)
		if (frandom(0, 1) > regenrate) { return; }

		//Console.PrintF("healing?");
		if (dirty > 0) { dirty--; }
		if (obstructed > 0) { obstructed--; }
		if (infection > 0) { infection--; }

		// regenrate works really damn weirdly, which makes sense since wounds normally depend on 2f to heal
		//Super.Regenerate();
	}

	void TryStabilise() {
		float minStable = 0;
		float maxStable = log(pressure + 1.0001) / max(0.1, depth + patched);
		stabilised = min(stabilised + frandom(minStable, maxStable), 100);
	}

	bool inpain(int inflict = 0) {
		pain += inflict;
		return (pain > (painkiller + 25) * 2);
	}

	// TODO: don't rely on Super.Bleedout();
	override void Bleedout() {
		if (frandom(1, 100) <= stabilised) { return; }

		float actualWidth = width;
		if (stabilised > 0.) { width -= width * stabilised / 100; }
		CreateBloodDrops();
		Super.Bleedout();
		width = actualWidth;
	}
}

// Status methods
extend class UaS_Wound {
	// NOTE: Update the values, ples
	void UpdateAverageStatus() {
		int retvalue, counted;
		if (dirty >= 0) { retvalue += dirty; counted++; }
		if (obstructed >= 0) { retvalue += obstructed; counted++;}
		if (cavity >= 0) { retvalue += cavity / 12 * 100; counted++;}
		if (open >= 0) { retvalue += open / 15 * 100; counted++;}
		//retvalue += infection;
		avgstat = retvalue / counted;
	}
}

// Static methods
extend class UaS_Wound {
	static UaS_Wound Create(HDBleedingWound hdbw) {
		// NOTE: adjust these values later
		int depthmin = clamp(hdbw.depth * 10, 0, 100);
		int depthmax = clamp(hdbw.depth * 20, 0, 100);

		let nw = UaS_Wound(new("UaS_Wound"));

		nw.painkiller = 0;
		nw.dirty = max(-1, randompick[uas_wi](-1, 1, 1, 1) * random[uas_wi](depthmin, depthmax));
		nw.obstructed = max(-1, randompick[uas_wi](-1, 1) * random[uas_wi](depthmin, depthmax));
		//nw.cavity = max(-1, randompick[uas_wi](-1, 1, 1) * random[uas_wi](depthmin, depthmax));
		nw.cavity = hdbw.width * frandom(1, 3);
		nw.infection = (nw.dirty + nw.obstructed + nw.open + nw.cavity) / 4;
		//nw.open = random[uas_wi](depthmin, depthmax);
		nw.open = hdbw.depth;
		nw.timer = (random[uas_wi](10, 30) * 35);
		nw.description = WoundDescription(hdbw.depth);
		nw.pressure = (hdbw.patched > 0.)? frandom(0.5, hdbw.patched + 0.5) : 0; // Don't let bandaged wounds just fall off instantly
		nw.stabilised = 0;

		// Inherit
		nw.bleeder = hdbw.bleeder;
		nw.source = hdbw.source;
		nw.depth = hdbw.depth; // How big is the wound?
		nw.width = hdbw.width; // Affects bleedrate, somewhat
		nw.patched = hdbw.patched;
		nw.oldPatched = nw.patched;
		nw.sealed = hdbw.sealed;
		nw.regenrate = 0; // avgstat will influence this
		nw.damagetype = hdbw.damagetype;
		nw.location = hdbw.location; // Could be used for flavour text?
		nw.age = hdbw.age;

		return nw;
	}

	static string WoundDescription(int newsize) {
		int sevmax = UaS_Wound.severity.size()-1;
		int typmax = UaS_Wound.type.size()-1;
		int parmax = UaS_Wound.bodypart.size()-1;
		return string.format(
			Stringtable.Localize("$UI_WOUND_DESCRIPTION_FORMAT"),
			UaS_Wound.severity[random[uas_wi](0, sevmax)],
			UaS_Wound.type[random[uas_wi](0, typmax)],
			UaS_Wound.bodypart[random[uas_wi](0, parmax)]
		);
	}

	static const string[] severity = { "minor","small","shallow","superficial","moderate","medium","large","deep","serious","critical" };
	static const string[] type = { "incision","laceration","puncture","avulsion","penetration" };
	static const string[] bodypart = {
		"chest","abdomen","pelvis",
		"upper back","lower back",
		"left shoulder","right shoulder",
		"left upper arm","right upper arm",
		"left forearm","right forearm",
		"left hip","right hip",
		"left thigh","right thigh",
		"left calf","right calf",
		"left shin","right shin"
	};
}

extend class UaS_Wound {
	array<UaS_BloodParticle> drops;
	FSpawnParticleParams BP;
	vector3 oldpos;

	void CreateBloodDrops() {
		// This randompick is a hack.
		// It's supposed to be based on how much
		// blood the player loses in bleedout()
		for (int i=0; i<=randompick(0,0,0,0,1,1,1,2,2,3); i++) {
			double avgsize = (width + depth) / 2.0;
			let newdrop = UaS_BloodParticle(new("UaS_BloodParticle"));
			newdrop.pos.x = frandom[ubw](-avgsize, avgsize) * 0.05;
			newdrop.pos.y = frandom[ubw](-avgsize, avgsize) * 0.05;
			newdrop.pos.z = frandom[ubw](-avgsize, avgsize) * 0.05;
			newdrop.size = 0;
			newdrop.maxsize = frandom[ubw](1,2);
			newdrop.maxz = frandom[ubw](-8, -5);
			newdrop.startlife = 0-i;
			drops.push(newdrop);
		}
	}

	void BloodDrops() {
		// Calculate offset
		vector3 off = bleeder.pos + (
			cos(location.x+bleeder.angle) * bleeder.radius * 0.7,
			sin(location.x+bleeder.angle) * bleeder.radius * 0.7,
			location.y * bleeder.height);
		vector3 interpvel = level.Vec3Diff(oldpos, off);
		double avgsize = (width + depth) / 2.0;

		// Spawn a wound particle;
		if (depth >= 8) { BP.Texture = TexMan.CheckForTexture ("BLUDC0"); }
		else if (depth >= 4) { BP.Texture = TexMan.CheckForTexture ("BLUDB0"); }
		else if (depth >= 1) { BP.Texture = TexMan.CheckForTexture ("BLUDA0"); }
		else { BP.Texture = TexMan.CheckForTexture (""); }
		BP.Color1 = "DarkRed";
		BP.Pos = oldpos;
		BP.Lifetime = 1;
		BP.Vel = interpvel;
		BP.Size = (depth+1)/2;
		BP.Flags = SPF_REPLACE;
		BP.FadeStep = 0;
		BP.Style = STYLE_Normal;
		if (width > 0.) { BP.StartAlpha = min(1, max((depth / width), 0.3)); }
		else { BP.StartAlpha = 0.3; }
		level.SpawnParticle(BP);

		// Do appearing and drops running down body
		for (int i=drops.size()-1; i>0; i--) {
			let d = drops[i];
			if (d.startlife < 0) { d.startlife++; continue; }
			BP.Pos = oldpos + d.pos;
			BP.Pos.z -= d.vel.z;
			BP.Size = d.size / 2;
			BP.Texture = TexMan.CheckForTexture ("");
			BP.StartAlpha = d.size / (d.maxsize + 1);
			BP.Lifetime = 1;
			BP.Accel.Z = 0;
			BP.Vel = interpvel;
			BP.Vel.Z += d.vel.z;

			if (d.size >= d.maxsize) {
				d.vel.z = clamp(
					d.vel.z + frandom[ubw](-0.01, 0.01),
					-0.25, 0);
			}
			d.pos += d.vel;
			d.size = min(d.size + frandom[ubw](0.01, 0.1), d.maxsize);

			// allow flinging off
			//if (interpvel.length() > 5) {
			//	BP.Lifetime = random[ubw](10,20);
			//	BP.Size = d.size / 3;
			//}

			// Drop free after a bit
			if (d.pos.z < d.maxz && random[ubw](1,5) == 1) {
				BP.Accel.Z = -bleeder.gravity * 0.5;
				BP.Lifetime = random[ubw](10,20);
				BP.Vel.Z += d.vel.z;
				d.destroy();
				drops.delete(i);
			}

			level.SpawnParticle(BP);
		}
		drops.shrinktofit();
		oldpos = off;
	}
}

class UaS_BloodParticle {
	double size, maxsize, maxz;
	vector3 pos, oldpos, vel, oldvel;
	int startlife;
}
