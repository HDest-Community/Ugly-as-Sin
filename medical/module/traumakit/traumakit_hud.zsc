extend class UaS_TraumaKit {
	override void DrawHUDStuff(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl) {
		if (!patient) return;
		// Floats for precision (also required for centering)
		Vector2 hudScale = (UaS_TraumaKit_HUDScale, UaS_TraumaKit_HUDScale);
		float textHeight = sb.pSmallFont.mFont.GetHeight() * hudscale.y;
		float padding = 2 * hudscale.y;
		float padStep = textHeight + padding;
		float halfStep = padStep / 2;
		float baseOffset = (-7 * textHeight) + (-3 * padding); // Start calculating from center of screen?

		// Header
		sb.DrawString(
			sb.pSmallFont,
			"--- \cyTrauma Kit\c- ---",
			(0, baseOffset),
			sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_CENTER,
			Font.CR_GRAY,
			scale: hudscale
		);
		sb.DrawString(
			sb.pSmallFont,
			"Treating \cg" .. patient.player.GetUsername(),
			(0, baseOffset + textHeight),
			sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_CENTER,
			Font.CR_GRAY,
			scale: hudscale
		);

		// Wound List
		int woundListOffsetX = -12;
		float woundListOffsetY = baseOffset + (3 * textHeight) + (3 * padStep);

		if (wh.critWounds.Size() == 0) {
			sb.DrawString(
				sb.pSmallFont,
				"No treatable wounds",
				(0, woundListOffsetY),
				sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_CENTER,
				Font.CR_GRAY,
				scale: hudscale
			);
		} else {
			Array<string> wounds;
			int idx = (wh.currentWound)? wh.critWounds.Find(wh.currentWound) : 0;
			int loopMin = Min(idx - 2, wh.critWounds.Size() - 5);
			int loopMax = Max(idx + 2, 4);

			// Compile list
			for (int i = loopMin; i <= loopMax; i++) {
				if (
					i < 0
					|| i > wh.critWounds.Size() - 1
					|| !wh.critWounds[i]
				) { continue; }

				string textColor;
				bool selected = (wh.currentWound && i == idx);
				if (wh.critWounds[i].avgstat >= 15) {
					textColor = (selected)? "\ca" : "\cr"; // Red / Dark Red
				} else {
					textColor = (selected)? "\cd" : "\cq"; // Green / Dark Green
				}

				string pointer = (selected)? " <" : "";
				wounds.push(textColor..wh.critWounds[i].description..pointer);
				woundListOffsetY -= halfStep;
			}
			woundListOffsetY += halfStep; // accommodation

			// Top overflow dot
			if (loopMin > 0) {
				sb.DrawString(
					sb.pSmallFont,
					". . .",
					(woundListOffsetX, woundListOffsetY - padStep),
					sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_RIGHT,
					Font.CR_GRAY,
					scale: hudscale
				);
			}

			// The actual list
			for (int i = 0; i < wounds.Size(); i++) {
				sb.DrawString(
					sb.pSmallFont,
					wounds[i],
					(woundListOffsetX, woundListOffsetY),
					sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_RIGHT,
					scale: hudscale
				);

				woundListOffsetY += padStep;
			}

			// Bottom overflow dot
			if (loopMax < wh.critWounds.Size() - 1) {
				sb.DrawString(
					sb.pSmallFont,
					". . .",
					(woundListOffsetX, woundListOffsetY),
					sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_RIGHT,
					Font.CR_GRAY,
					scale: hudscale
				);
			}
		}

		// Wound info
		int woundInfoOffsetX = 12;
		float woundInfoOffsetY = baseOffset + (3 * textHeight) + (3 * padStep);
		if (wh.currentWound) {
			Array<string> status;

			if (wh.currentWound.open <= 0) {
				status.Push("-The wound is "..GetStatusColor(wh.currentWound.open).."closed\c-.");
			}
			else if (wh.currentWound.depth <= 0. && wh.currentWound.patched > 0.) {
				status.Push("-The wound is "..GetStatusColor(wh.currentWound.open * 10).."open\c- but \c[Yellow]patched\c-");

				string tmpStr;
				if (wh.currentWound.stabilised >= 100.0) { tmpStr = "fine"; }
				else if (wh.currentWound.stabilised > 75.0) { tmpStr = "somewhat fine"; }
				else if (wh.currentWound.stabilised > 50.0) { tmpStr = "decent"; }
				else if (wh.currentWound.stabilised > 25.0) { tmpStr = "not that great"; }
				else if (wh.currentWound.stabilised > 5.0) { tmpStr = "less horrible"; }
				else { tmpStr = "horrible"; }
				status.Push("-It seems to be "..GetStatusColor(100 - wh.currentWound.stabilised)..tmpStr);
				woundInfoOffsetY -= halfStep;
			}
			else {
				status.Push("-The wound is "..GetStatusColor(wh.currentWound.open * 10).."open");

				string tmpStr;

				// Painkillers
				tmpStr = "not numbed.";
				if (wh.currentWound.painkiller >= 75) tmpStr = "numbed";
				else if (wh.currentWound.painkiller >= 50) tmpStr = "mostly numbed";
				else if (wh.currentWound.painkiller >= 25) tmpStr = "somewhat numbed";

				status.Push("-It is "..GetStatusColor(100 - wh.currentWound.painkiller)..tmpStr);
				woundInfoOffsetY -= halfStep;

				// Dirty
				if (wh.currentWound.dirty >= 0) {
					tmpStr = "completely clean";
					if (wh.currentWound.dirty >= 65) { tmpStr = "filthy"; }
					else if (wh.currentWound.dirty >= 55) { tmpStr = "very dirty"; }
					else if (wh.currentWound.dirty >= 45) { tmpStr = "somewhat dirty"; }
					else if (wh.currentWound.dirty >= 35) { tmpStr = "a bit dirty"; }
					else if (wh.currentWound.dirty >= 25) { tmpStr = "almost clean"; }
					else if (wh.currentWound.dirty >= 15) { tmpStr = "acceptably clean"; }

					status.Push("-It is "..GetStatusColor(wh.currentWound.dirty)..tmpStr);
					woundInfoOffsetY -= halfStep;
				}

				// Obstructions
				if (wh.currentWound.obstructed >= 0) {
					tmpStr = "no apparent obstructions";
					if (wh.currentWound.obstructed >= 55) { tmpStr = "many obstructions"; }
					else if (wh.currentWound.obstructed >= 45) { tmpStr = "several obstructions"; }
					else if (wh.currentWound.obstructed >= 35) { tmpStr = "a few obstructions"; }
					else if (wh.currentWound.obstructed >= 25) { tmpStr = "some obstructions"; }
					else if (wh.currentWound.obstructed >= 15) { tmpStr = "very little obstructions"; }

					status.Push("-There are "..GetStatusColor(wh.currentWound.obstructed)..tmpStr);
					woundInfoOffsetY -= halfStep;
				}

				// Cavity
				if (wh.currentWound.cavity >= 0) {
					tmpStr = "no treatable tissue damage";
					if (wh.currentWound.cavity >= 12.0) { tmpStr = "severe tissue damage"; }
					else if (wh.currentWound.cavity >= 8.5) { tmpStr = "significant tissue damage"; }
					else if (wh.currentWound.cavity >= 5.0) { tmpStr = "moderate tissue damage"; }
					else if (wh.currentWound.cavity >= 2.5) { tmpStr = "some tissue damage"; }
					else if (wh.currentWound.cavity >= 1.0) { tmpStr = "little tissue damage"; }

					status.Push("-There is "..GetStatusColor(wh.currentWound.cavity * 5)..tmpStr);
					woundInfoOffsetY -= halfStep;
				}
			}

			for (int i = 0; i < status.Size(); i++) {
				sb.DrawString(
					sb.pSmallFont,
					status[i],
					(woundInfoOffsetX, woundInfoOffsetY),
					sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT,
					Font.CR_GRAY,
					scale: hudscale
				);

				woundInfoOffsetY += padStep;
			}
		} else if (wh.critWounds.Size() > 0) {
			sb.DrawString(
				sb.pSmallFont,
				"-No wounds selected-",
				(woundInfoOffsetX, woundInfoOffsetY),
				sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT,
				Font.CR_DARKGRAY,
				scale: hudscale
			);
		}

		// Tool list
		float toolListSpacing = 24 * hudscale.x;
		float toolListOffsetX = toolListSpacing * -3;
		float toolListOffsetY = baseOffset + (4 * textHeight) + (7 * padStep);
		Array<String> toolIcons;
		for (int i = 0; i <= T_SCALPEL; i++) {
			string toolName = String.Format(
				"%s%s",
				(i == weaponstatus[TK_SELECTED])? "\c[White]" : "\c[DarkGrey]", toolListNames[i]
			);
			float alpha = (i == weaponstatus[TK_SELECTED])? 0.75 : 0.50;

			toolIcons.Push(toolListIcons[i]);
			sb.DrawImage(
				toolListIcons[i],
				(toolListOffsetX, toolListOffsetY),
				sb.DI_SCREEN_CENTER | sb.DI_ITEM_CENTER,
				alpha,
				scale: hudscale
			);
			sb.DrawString(
				sb.pSmallFont,
				toolName,
				(toolListOffsetX, toolListOffsetY),
				sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_CENTER,
				alpha: alpha,
				scale: hudscale
			);

			toolListOffsetX += toolListSpacing;
		}

		// Tool info
		float toolInfoOffset = baseOffset + (4 * textHeight) + (8 * padStep);
		Array<string> trueStatusMessage;
		statusMessage.Split(trueStatusMessage, "\n"); // it just works

		for (int i = 0; i < trueStatusMessage.Size(); i++) {
			sb.DrawString(
				sb.pSmallFont,
				trueStatusMessage[i],
				(0, toolInfoOffset),
				sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_CENTER,
				scale: hudscale
			);

			toolInfoOffset += textHeight;
		}


		// wheel stuff
		if (
			!UaS_TraumaKit_AltControls
			|| !(UaS_TraumaKit_AltControls.GetBool() && (hpl.Player.cmd.Buttons & BT_FIREMODE))
			|| !wheel
		) { return; }

		wheel.DrawWheel(
			weaponstatus[TK_SELECTED],
			7,
			toolIcons,
			(Screen.GetWidth() / 2, Screen.GetHeight() / 2)
		);
	}

	static const string[] toolListNames = { "AT", "SL", "FC", "BF", "SP", "ST", "SC" };
	static const string[] toolListIcons = { "ANESTH", "SALINE", "FORCEPS", "BIOFOAM", "STAPLER", "SUTURE", "SCALPEL" };
}
