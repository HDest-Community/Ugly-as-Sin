extend class UaS_TraumaKit {
	void HandleScalpel() {
		statusMessage = statusmessage..Stringtable.Localize("$UI_TRK_SCALPEL_INFO");

		// Handle actions
		if (weaponstatus[TK_HOLD] > 0) { weaponstatus[TK_HOLD]--; }
		if (owner.player.cmd.buttons & BT_UNLOAD && weaponstatus[TK_HOLD] <= 0) {
			if (weaponstatus[TK_SCALPEL_CAP] == 1) {
				weaponstatus[TK_SCALPEL_CAP] = 0;
				currentmessage.text = Stringtable.Localize("$UI_TRK_SCALPEL_REMOVECAP");
			}
			else {
				weaponstatus[TK_SCALPEL_CAP] = 1;
				currentmessage.text = Stringtable.Localize("$UI_TRK_SCALPEL_REPLACECAP");
			}
			currentmessage.timeout = 25;
			weaponstatus[TK_HOLD] = 15;
		}

		if ((owner.player.cmd.buttons & BT_ATTACK) && !(owner.player.oldbuttons & BT_ATTACK) && (weaponstatus[TK_HOLD] <= 0)){
			if (weaponstatus[TK_SCALPEL_CAP] == 1) {
				currentmessage.text = Stringtable.Localize("$UI_TRK_SCALPEL_CAPON");
				currentmessage.timeout = 25;
				weaponstatus[TK_HOLD] = 25;
				return;
			}

			// CRAWWWWWWWWLLLLING INNNNNNNN MMMMYYYYYY SSSKKKKKIIIIIINNNNN
			// THEEEESSSSEE WOOOOUUUNNNDS THHHEEEEYYY WIILLL NOOOOTTTTT HEEEAAAAALLL
			if (!mti.currentWound) {
				owner.A_StartSound("bandage/rip",CHAN_WEAPON);
				mti.patient.damagemobj(owner,owner,5,"staples");
				mti.wh.AppendWound(HDBleedingWound.Inflict(mti.patient, frandom(0.4, 2.4), frandom(0.6, 1.8), source: owner));
				HDPlayerPawn(mti.wh.owner).oldwoundcount += random(4, 6); // no cheesing
				return;
			}

			if (!HandleStrip()) { return; }
			if (mti.currentWound.inpain(75)) {
				mti.patient.damagemobj(owner,owner,1,"staples");
				weaponstatus[TK_HOLD] = 50;
				PainJolt();
			}
			else {
				weaponstatus[TK_HOLD] = 25;
			}
			mti.patient.A_MuzzleClimb(
				(frandom[uas_tk](-1,1),frandom[uas_tk](1,4)),
				(frandom[uas_tk](-1,1),frandom[uas_tk](1,3)),
				(frandom[uas_tk](-1,1),frandom[uas_tk](1,2)),
				(frandom[uas_tk](-1,1),frandom[uas_tk](1,1))
			);
			//double newDepth = min(mti.currentWound.open + frandom[uas_tk](0.5,2.0-mti.currentWound.painkiller), 20.0);
			double newDepth = min(mti.currentWound.open + frandom[uas_tk](0.5,2.0), 20.0);
			mti.currentWound.sealed = max(mti.currentWound.sealed - newDepth, 0);
			mti.currentWound.depth = newDepth;
			//mti.currentWound.cavity = min(mti.currentWound.cavity + frandom[uas_tk](0,2.0-(mti.currentWound.painkiller/4)), 20.0);
			mti.currentWound.cavity = min(mti.currentWound.cavity + frandom[uas_tk](0,2.0), 20.0);
			return;
		}
	}
}
