class UaS_WoundHandler : Inventory {
	Array<UaS_Wound> critwounds;

	default {
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.UNDROPPABLE;
		-INVENTORY.INVBAR;
		+INVENTORY.UNTOSSABLE;
	}

	override void DoEffect() {
		if (!owner) { return; }
		UpdateWounds();
		WoundPainShake();
	}

	void WoundPainShake() {
		if(critwounds.size() <= 0) { return; }
		double maxpain;
		for(int i = 0; i < critwounds.size(); i++) {
			if (!critwounds[i]) { continue; }
			maxpain = max(maxpain, critwounds[i].pain);
		}
		double ps = min(maxpain / 200, 1.5);
		HDPlayerPawn(owner).A_MuzzleClimb(
			ps*(frandom[uas_wh](-1,1),ps*frandom[uas_wh](-1,1)),
			ps*(frandom[uas_wh](-1,1),ps*frandom[uas_wh](-1,1)),
			ps*(frandom[uas_wh](-1,1),ps*frandom[uas_wh](-1,1)),
			ps*(frandom[uas_wh](-1,1),ps*frandom[uas_wh](-1,1))
		);
	}

	// hopefully doesn't cause any performance problems :]
	void UpdateWounds() {
		// clean up
		for (int i = 0; i < critwounds.Size(); i++) {
			if (critwounds[i]) { continue; }
			critwounds.Delete(i--);
		}

		// Override HDBleedingWound
		let ti = ThinkerIterator.Create("HDBleedingWound", Thinker.STAT_DEFAULT);
		HDBleedingWound hdbw;
		while (hdbw = HDBleedingWound(ti.Next())) {
			if (hdbw.GetClassName() != "HDBleedingWound" || hdbw.bleeder != owner) { continue; }

			AppendWound(hdbw);
		}
	}

	void AppendWound(HDBleedingWound hdbw) {
		critwounds.Push(UaS_Wound.Create(hdbw));
		if (UaS_Medical_Debug) {
			Console.PrintF(
				"new wound %d: %f (%f, %f)",
				critwounds.Size(), hdbw.depth, hdbw.location.x, hdbw.location.y);
		}
		hdbw.Destroy();
	}

	void RemoveWound(int w) {
		critwounds[w].destroy();
		critwounds.delete(w);
	}
}
