// AHHHHHHH, I NEED A MEDIC BAG
class UaS_SelfBandage : UaS_MedicalTool {
	int progress;
	int timer;
	int timeout;
	string statusMessage;
	string toolHelpText;
	BandageActions actionType;

	Default {
		Tag "$UAS_BANDAGING_TAG";
		+Inventory.UNTOSSABLE;
		+HDWeapon.DONTDISARM;
	}

	override void PostBeginPlay() {
		Super.PostBeginPlay();
		weaponstatus[0] = TYPE_BANDAGE;
		timer = 0;
		progress = 0;
		actionType = ACTION_NONE;
		toolHelpText = "";
	}

	override string GetHelpText() {
		LocalizeHelp();
		return
			LWPHELP_RELOAD..Stringtable.Localize("$UAS_BANDAGING_HELPTEXT_SLASH")..LWPHELP_ALTRELOAD..Stringtable.Localize("$UAS_BANDAGING_HELPTEXT_CYCLEWOUNDS")
			..LWPHELP_FIREMODE..Stringtable.Localize("$UAS_BANDAGING_HELPTEXT_HOLDAND")
			..Stringtable.Localize("$UAS_BANDAGING_HELPTEXT_PLUS")..LWPHELP_FIRE..Stringtable.Localize("$UAS_BANDAGING_HELPTEXT_REMOVEBLOODFEEDER")
			..Stringtable.Localize("$UAS_BANDAGING_HELPTEXT_PLUS")..LWPHELP_ALTFIRE..Stringtable.Localize("$UAS_BANDAGING_HELPTEXT_STRIPLAYERS")
			..LWPHELP_ZOOM..Stringtable.Localize("$UAS_BANDAGING_HELPTEXT_TREATANOTHER")
			..toolHelpText;
	}

	override Inventory CreateTossable() {
		HDWoundFixer.DropMeds(owner, 0);
		return null;
	}

	void ResetAction() {
		timer = 0;
		progress = 0;
		actionType = ACTION_NONE;
	}

	override void DoEffect() {
		if (!(owner.player.ReadyWeapon is "UaS_SelfBandage")) { return; }

		Super.DoEffect();

		if (timer >= 0) { --timer; }
		if (timeout >= 0) { --timeout; }
		if (timeout <= 0) { ResetAction(); }
		if (currentMessage.timeout > 0) { --currentMessage.timeout; }
		else { currentMessage.text = ""; }

		CycleWounds();
		TryRipBloodbag();
		TryStripWorn();

		switch (weaponstatus[0]) {
			default:
				HandleBandage();
				break;
		}

		// update helptext
		let hdp = HDPlayerPawn(owner);
		if (hdp) { hdp.wephelptext = "\cu"..GetTag().."\n"..GetHelpText(); }
	}

	bool CheckCovered() {
		let blockinv = HDWoundFixer.CheckCovered(mti.patient, CHECKCOV_ONLYFULL);
		if (blockinv) {
			string text = "$UAS_BANDAGING_HELPTEXT_TAKEOFF_"..((mti.patient == owner)? "YOU" : "THEY");
			currentMessage.text = string.Format(Stringtable.Localize(text), blockinv.GetTag());
			currentMessage.timeout = 2 * 35;
			return true;
		}

		return false;
	}

	// also updates wounds
	void CycleWounds() {
		if (mti.wh.critwounds.Size() == 0) { return; }

		if (owner.player.cmd.buttons & BT_RELOAD && !(owner.player.oldbuttons & BT_RELOAD)) {
			mti.UpdateCurrentWound(mti.currentWoundIdx + 1);
			ResetAction();
			currentMessage.timeout = 0;
		}
		else if (owner.player.cmd.buttons & BT_ALTRELOAD && !(owner.player.oldbuttons & BT_ALTRELOAD)) {
			mti.UpdateCurrentWound(mti.currentWoundIdx - 1);
			ResetAction();
			currentMessage.timeout = 0;
		}
	}

	void TryRipBloodbag() {
		if (
			!(owner.player.cmd.buttons & BT_FIREMODE && owner.player.cmd.buttons & BT_ATTACK)
			|| CheckCovered()
		) { return; }
		if (!mti.patient.CountInv("BloodBagWorn")) {
			string text = "$UAS_BANDAGING_HELPTEXT_NOBLOODBAG_"..((mti.patient == owner)? "YOU" : "THEY");
			currentMessage.text = Stringtable.Localize(text);
			currentMessage.timeout = 2 * 35;
			return;
		}

		currentMessage.text = Stringtable.Localize("$UAS_BANDAGING_HELPTEXT_RIPPINGOFFBAG");
		currentMessage.timeout = 10;
		if ((timer <= 0 && timeout <= 0) || actionType != ACTION_RIPBLOODBAG) {
			timeout = 5;
			progress = 0;
			actionType = ACTION_RIPBLOODBAG;
			BandageEffect(10, 15);
			owner.A_StartSound("bandage/pocket", CHAN_BODY, CHANF_OVERLAP);
			return;
		}
		else if (timer > 0 && timeout > 0) { timeout = 5; return; }

		mti.patient.A_SetBlend("7a 3a 18", 0.1, 4);
		HDPlayerPawn(owner).A_MuzzleClimb((0, 2), (0, 0), (0, 0), (0, 0));
		HDPlayerPawn.PlaySkinSound(mti.patient, SKINSOUND_MEDS, "*usemeds");
		mti.patient.DropInventory(mti.patient.FindInventory("BloodBagWorn"));
	}

	void TryStripWorn() {
		if (!(
			owner.player.cmd.buttons & BT_FIREMODE
			&& owner.player.cmd.buttons & BT_ALTFIRE
			&& !(owner.player.oldbuttons & BT_ALTFIRE)
		)) { return; }
		if (HDPlayerPawn.CheckStrip(mti.patient, mti.patient, silent: true)) {
			currentMessage.text = Stringtable.Localize("$UAS_BANDAGING_HELPTEXT_NOTHINGTOSTRIP");
			currentMessage.timeout = 2 * 35;
			return;
		}
	}

	enum BandageTypes {
		TYPE_IMPROVISED,
		TYPE_BANDAGE,
	};

	enum BandageActions {
		ACTION_NONE,
		ACTION_BANDAGE,
		ACTION_RIPBANDAGE,
		ACTION_RIPBLOODBAG,
	};
}
