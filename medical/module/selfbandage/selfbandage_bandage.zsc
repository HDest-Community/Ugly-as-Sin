extend class UaS_SelfBandage {
	void HandleBandage() {
		statusMessage = Stringtable.Localize("$UAS_BANDAGING_DESCRIPTION_TITLE");
		statusMessage = statusMessage..Stringtable.Localize("$UAS_BANDAGING_DESCRIPTION_DESCRIPTION");

		toolHelpText =
			LWPHELP_FIRE..Stringtable.Localize("$UAS_BANDAGING_HELPTEXT_BANDAGEWOUND")
			..LWPHELP_ALTFIRE..Stringtable.Localize("$UAS_BANDAGING_HELPTEXT_RIPBANDAGE");

		if (owner.player.cmd.buttons & BT_FIREMODE) { return; }
		if (owner.player.cmd.buttons & BT_ATTACK) { TryBandage(); }
		else if (owner.player.cmd.buttons & BT_ALTATTACK) { TryRipBandage(); }
	}

	void BandageWound(float toPatch, float pressure) {
		if (!mti.currentWound) { return; }

		mti.currentWound.Patch(toPatch);
		if (mti.currentWound.depth <= 0. || mti.currentWound.pressure <= 0.3) {
			mti.currentWound.pressure += pressure;
		}
	}

	void BandageEffect(int min, int max) {
		timer = Random(min, max);
		HDPlayerPawn(owner).A_MuzzleClimb((FRandom(-1.5, 1.8), FRandom(-2.4, 2.4)), (0, 0), (0, 0), (0, 0));
		mti.patient.A_StartSound("bandage/rustle", CHAN_BODY, CHANF_OVERLAP);
	}

	void TryBandage() {
		if (CheckCovered() || !mti.currentWound) { return; }
		if (mti.patient == owner && owner.pitch < 45) { owner.pitch += 6; return; }
		if (mti.currentWound.depth <= 0. && mti.currentWound.patched <= 0.) {
			currentMessage.text = Stringtable.Localize("$UAS_BANDAGING_MSG_NOTHINGTOBEDONE");
			currentMessage.timeout = 2 * 35;
			return;
		}
		else if (mti.patient.CountInv("IsMoving") >= 4) {
			string text = "$UAS_BANDAGING_BANDAGEMSG_STAYSTILL_"..((mti.patient == owner)? "YOU" : "THEY");
			currentMessage.text = Stringtable.Localize(text);
			currentMessage.timeout = 2 * 35;
			return;
		}

		currentMessage.text = Stringtable.Localize("$UAS_BANDAGING_BANDAGEMSG_ATTEMPTING");
		currentMessage.timeout = 10;
		if ((timer <= 0 && timeout <= 0) || actionType != ACTION_BANDAGE) {
			timeout = 5;
			progress = 0;
			actionType = ACTION_BANDAGE;
			owner.A_StartSound("bandage/rip", CHAN_WEAPON, CHANF_OVERLAP, 0.4);
			BandageEffect(5, 10);
			return;
		}
		else if (timer <= 0 && timeout > 0) { ++progress; }
		else { timeout = 5; return; }

		switch (progress) {
			case 1:
				BandageEffect(30, 40);
				break;

			case 2:
				BandageEffect(30, 35);
				break;

			case 3:
				BandageEffect(15, 20);
				break;

			default:
				BandageEffect(4, 8);
				mti.patient.A_StartSound("weapons/pocket", CHAN_BODY, CHANF_OVERLAP);
				mti.patient.A_ChangeVelocity(FRandom(-0.3, 0.3), FRandom(-0.3, 0.3), FRandom(-1, 2));

				progress = 0;
				BandageWound(FRandom(5, 15), FRandom(0.25, 0.95));
				break;
		}
	}

	void TryRipBandage() {
		if (CheckCovered() || !mti.currentWound) { return; }
		if (mti.patient == owner && owner.pitch < 45) { owner.pitch += 6; return; }
		if (mti.currentWound.patched <= 0.) {
			currentMessage.text = Stringtable.Localize("$UAS_BANDAGING_MSG_NOTHINGTOBEDONE");
			currentMessage.timeout = 2 * 35;
			return;
		}
		else if (mti.patient.CountInv("IsMoving") >= 4) {
			string text = "$UAS_BANDAGING_RIPBANDAGEMSG_STAYSTILL_"..((mti.patient == owner)? "YOU" : "THEY");
			currentMessage.text = Stringtable.Localize(text);
			currentMessage.timeout = 2 * 35;
			return;
		}

		currentMessage.text = Stringtable.Localize("$UAS_BANDAGING_RIPBANDAGEMSG_ATTEMPTING");
		currentMessage.timeout = 10;
		if ((timer <= 0 && timeout <= 0) || actionType != ACTION_RIPBANDAGE) {
			timeout = 5;
			progress = 0;
			actionType = ACTION_RIPBANDAGE;
			BandageEffect(5, 10);
			return;
		}
		else if (timer <= 0 && timeout > 0) { ++progress; }
		else { timeout = 5; return; }

		switch (progress) {
			case 1:
			case 2:
			case 3:
			case 4:
				BandageEffect(4, 10);
				break;

			default:
				BandageEffect(0, 0);
				mti.patient.A_StartSound("bandage/rip", CHAN_BODY, CHANF_OVERLAP);
				owner.A_ChangeVelocity(FRandom(-0.3, 0.3), FRandom(-0.3, 0.3), FRandom(-1, 2));

				progress = 0;
				mti.currentWound.depth += mti.currentWound.patched;
				mti.currentWound.patched = 0;
				mti.currentWound.pressure = 0;
				break;
		}
	}
}
