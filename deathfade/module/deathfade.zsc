class UaS_DeathFade_Bootstrap : EventHandler {
	override void WorldTick() {
		for (int i = 0; i < MAXPLAYERS; i++) {
			if (!playeringame[i]) { continue; }
			bool doFade = DoDeathFade(i);
			if (players[i].health > 0 || !doFade) { Deathfade_Bootstrap(i, false); }
			else if (players[i].health <= 0 && doFade) {
				Shader.SetEnabled(players[i], "deathfade", true);
			}
		}
	}

	bool DoDeathFade(int pnum) {
		let deathfade = CVar.GetCVar("UaS_DeathFade", players[pnum]);
		if (!deathfade) { return true; }
		return deathfade.GetBool();
	}

	override void PlayerDied(PlayerEvent e) {
		if (!DoDeathFade(e.PlayerNumber)) { return; }
		Deathfade_Bootstrap(e.PlayerNumber, true);
	}

	void Deathfade_Bootstrap(int pnum, bool activate) {
		Shader.SetEnabled(players[pnum], "deathfade", activate);
		if (!activate) { return; }
		UaS_DeathFader df = new("UaS_DeathFader");
		df.plr = HDPlayerPawn(players[pnum].mo);
		df.counttoblack = (11 - min(abs(players[pnum].mo.health),10)) * 35;
		if(!df.plr) {
			console.printf("new deathfader failed for "..pnum) ;
			df.destroy();
			return;
		}
	}
}


class UaS_DeathFader : Thinker {
	HDPlayerPawn plr;
	double fadeamount;
	double counttoblack;

	override void Tick() {
		super.Tick();
		if (plr && fadeamount < 1.0 && plr.health <= 0) {
			fadeamount = min(fadeamount + (1.0/counttoblack), 1.0);
			Shader.SetUniform1f(plr.player, "deathfade", "fadeamount", fadeamount);
		}
		else { Destroy(); }
	}
}
