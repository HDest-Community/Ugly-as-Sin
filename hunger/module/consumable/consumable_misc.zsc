extend class UaS_Consumable {
	// Setters for randomized text
	void AddOpenText(string msg) { OpenText.Push(Stringtable.Localize(msg)); }
	void AddConsumeText(string msg) { ConsumeText.Push(Stringtable.Localize(msg)); }

	// Getters for randomized text
	string RandomOpenMessage() {
		if (OpenText.Size() <= 0) { return ""; }
		return OpenText[random[uas_hunger](0,OpenText.Size()-1)];
	}
	string RandomConsumeMessage() {
		if (ConsumeText.Size() <= 0) { return ""; }
		return ConsumeText[random[uas_hunger](0,ConsumeText.Size()-1)];
	}

	override double weaponbulk() {
		double itemsbulk = 0;
		if (weaponstatus[UGCS_GAVECONTENTS] == false) {
			for (int i=0; i < FoodList.size(); i++) {
				class<actor> bulkItem = (class<actor>)(FoodList[i]);
				bool isConsumable = (bulkItem && (bulkItem is (class<actor>)('UaS_Consumable')));
				bool isWeapon = (bulkItem && (bulkItem is (class<actor>)('HDWeapon')));
				bool isPickup = (bulkItem && (bulkItem is (class<actor>)('HDPickup')));
				if (isWeapon) {
					itemsbulk += (HDWeapon(getdefaultbytype((class<actor>)(FoodList[i]))).weaponbulk()) * 0.7;
				}
				else if (isPickup) {
					itemsbulk += (HDPickup(getdefaultbytype((class<actor>)(FoodList[i]))).bulk) * 0.7;
				}
				// else if (isConsumable) { // Don't think this is needed if weaponbulk() works...
					// itemsbulk += (UaS_Consumable(getdefaultbytype((class<actor>)(FoodList[i]))).bulk) * 0.7;
				// }
			}
		}
		return (bulk - (weaponstatus[UGCS_CONSUMED])) + itemsbulk;
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}

	override void DoEffect() {
		if (!CriticalChecks()) { return; }
		DoMessage();
		HandleInput();
		CheckAutoDrop();
		SetHelpText();
	}

	override void Tick() {
		super.tick();
		bfitsinbackpack = true;
		if (diffbulk > 0) { diffbulk *= 0.9; } // makes % remaining count-down nicely
		CheckAutoDestroy();
		DoSpoilage();
	}

	void DoSpoilage() {
		// spoilage over time, chances every proc
		// 10% major contamination	+5
		// 10% minor contamination	+2
		// 20% basic spoilage		+1
		// 60% nothing
		if (spoilrate <= 0) { return; } //hahaha totally didn't forget this, no
		if (weaponstatus[UGCS_LASTSPOILTIME] == -1) { return; }
		if (weaponstatus[UGCS_LASTSPOILTIME] < level.totaltime) {
			// Spoilage from external contamination if open
			if (weaponstatus[UGCS_OPEN] == UGCSF_OPENED) {
				weaponstatus[UGCS_SPOILAGE] += randompick(
					0,0,0,0,0,
					0,1,1,2,5);
			}
			// additional point possible if already spoiling, even if closed.
			if (random(0,100) <= weaponstatus[UGCS_SPOILAGE]) { weaponstatus[UGCS_SPOILAGE]++; }
			weaponstatus[UGCS_LASTSPOILTIME] += int((35*60) / spoilrate);
		}
	}

	bool UsedUp() {	return ((int(weaponbulk() + diffbulk) <= 0) || ((calories <= 0 && fluid <= 0) && (weaponstatus[UGCS_GAVECONTENTS] == true))); }
	void CheckAutoDrop() { if (UsedUp()) { owner.DropInventory(self); amount = actualamount; } }
	void CheckAutoDestroy() { if (UsedUp() && !owner) { destroy(); } }

	bool CriticalChecks() {
		// Skip all interaction if not selected
		if (!owner) { return false; }
		if (!(owner.player.readyweapon == self)) { return false; }
		if (owner.health <= 0) { return false; }

		// Set up tracker connection
		tracker = UaS_HungerTracker(owner.FindInventory("UaS_HungerTracker"));
		if (!tracker) { console.printf("no hunger tracker!"); return false; }

		return true;
	}

	void UpdateSprite() {
		string ic = TexMan.GetName(icon);
		string sp = ic.Left(4);
		string fr = ic.Mid(4, 1);
		sprite = GetSpriteIndex(sp);
		frame = (fr.ByteAt(0)-65);
	}

	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl) {
		vector2 mugsize = TexMan.GetScaledSize(sb.GetMugShot(5,Mugshot.CUSTOM,sb.getmug(hpl.mugshot)));
		sb.drawimage(TexMan.GetName(icon), (0, -14 - (mugsize.y * 1.25)),
			sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_ITEM_BOTTOM,
			scale:(2,2)
		);
	}

	override void InitializeWepStats(bool idfa) {
		Contents();
		weaponstatus[UGCS_CONSUMED] = 0;
		weaponstatus[UGCS_GAVECONTENTS] = false;
		// Set up packaging state. Packaged items have a 10% chance of being already open.
		if (!owner && bPACKAGED && FoodList.size() == 0 && random(1,10) == 1) { weaponstatus[UGCS_OPEN] = UGCSF_OPENED; }
		else { weaponstatus[UGCS_OPEN] = UGCSF_SEALED; }
		// Set up some initial spoilage amounts for unsealed items.
		if (weaponstatus[UGCS_OPEN] == UGCSF_OPENED) {
			weaponstatus[UGCS_SPOILAGE] = int(random(0,100) * (frandom(0,1) * frandom(0,1)));
			weaponstatus[UGCS_LASTSPOILTIME] = level.totaltime;
		}
		else { weaponstatus[UGCS_LASTSPOILTIME] = -1; }
	}

	override void PostBeginPlay() {
		bfitsinbackpack = true;
		super.PostBeginPlay();
	}

	override void BeginPlay() {
		bfitsinbackpack = true;
		if(consumesound == "" && bDRINKABLE) { consumesound = "UaS/Swish"; }
		UpdateSprite();
		//Process user's custom messages
		Messages();
		super.BeginPlay();
	}

	States {
		Spawn:
			TNT1 A -1 { invoker.UpdateSprite(); }
			Stop;
		// Ready:
			// TNT1 A 1 A_WeaponReady(WRF_NOFIRE);
			// Loop;
	}
}

enum ConsumableSlots {
	UGCS_CONSUMED,
	UGCS_OPEN,
	UGCS_GAVECONTENTS,
	UGCS_SPOILAGE,
	UGCS_LASTSPOILTIME,
}

enum ConsumableStatusFlags {
	UGCSF_SEALED = 0,
	UGCSF_OPENED = 1,
}
