extend class UaS_TraumaKit {

	enum SuppliesMax {
		TKS_MAX_PAINKILLER = 20,
		TKS_MAX_SALINE = 1000,
		TKS_MAX_BIOFOAM = 1000,
		TKS_MAX_STAPLES = 25,
	}

	override void actualpickup(actor other,bool silent){
		let tk=hdweapon(other.findinventory("UaS_TraumaKit"));
		if(tk) {
			other.A_Log(string.format(Stringtable.Localize("$PICKUP_TRK_REFILL")),true);
			A_StartSound("weapons/pocket");
			tk.weaponstatus[TKS_PAINKILLER] += weaponstatus[TKS_PAINKILLER];
			tk.weaponstatus[TKS_SALINE] += weaponstatus[TKS_SALINE];
			tk.weaponstatus[TKS_BIOFOAM] += weaponstatus[TKS_BIOFOAM];
			tk.weaponstatus[TKS_STAPLES] += weaponstatus[TKS_STAPLES];
			self.destroy();
			return;
		}
		super.actualpickup(other,silent);
	}

	override void DropOneAmmo(int amt) {
		if (!owner) { return; }
		if (Excess()) {
			UaS_TraumaKit dropped = UaS_TraumaKit(actor.spawn("UaS_TraumaKit", (owner.pos.x, owner.pos.y, owner.pos.z + owner.player.viewheight - 8)));
			dropped.VelFromAngle(owner.vel.length() + frandom[uas_tk](2,3), owner.angle + random[uas_tk](-8, 8));
			dropped.weaponstatus[TKS_PAINKILLER] = clamp(weaponstatus[TKS_PAINKILLER] - TKS_MAX_PAINKILLER, 0, TKS_MAX_PAINKILLER);
			dropped.weaponstatus[TKS_SALINE] = clamp(weaponstatus[TKS_SALINE] - TKS_MAX_SALINE, 0, TKS_MAX_SALINE);
			dropped.weaponstatus[TKS_BIOFOAM] = clamp(weaponstatus[TKS_BIOFOAM] - TKS_MAX_BIOFOAM, 0, TKS_MAX_BIOFOAM);
			dropped.weaponstatus[TKS_STAPLES] = clamp(weaponstatus[TKS_STAPLES] - TKS_MAX_STAPLES, 0, TKS_MAX_STAPLES);
			weaponstatus[TKS_PAINKILLER] -= dropped.weaponstatus[TKS_PAINKILLER];
			weaponstatus[TKS_SALINE] -= dropped.weaponstatus[TKS_SALINE];
			weaponstatus[TKS_BIOFOAM] -= dropped.weaponstatus[TKS_BIOFOAM];
			weaponstatus[TKS_STAPLES] -= dropped.weaponstatus[TKS_STAPLES];
		}
	}

	bool Excess() {
		if (weaponstatus[TKS_PAINKILLER] > TKS_MAX_PAINKILLER) { return true; }
		if (weaponstatus[TKS_SALINE] > TKS_MAX_SALINE) { return true; }
		if (weaponstatus[TKS_BIOFOAM] > TKS_MAX_BIOFOAM) { return true; }
		if (weaponstatus[TKS_STAPLES] > TKS_MAX_STAPLES) { return true; }
		return false;
	}

	override void initializewepstats(bool idfa){
		super.initializewepstats();
		weaponstatus[TKS_PAINKILLER] = TKS_MAX_PAINKILLER;
		weaponstatus[TKS_SALINE] = TKS_MAX_SALINE;
		weaponstatus[TKS_BIOFOAM] = TKS_MAX_BIOFOAM;
		weaponstatus[TKS_STAPLES] = TKS_MAX_STAPLES;
		weaponstatus[TK_SCALPEL_CAP] = 1;
	}

	// Copied from HD to avoid inheritance chain
	// Thanks to MarinaGryphon (jade-2562) for figuring this out
	void TakeInjector(class<inventory> injectortype) {
		// for pre-injector overhaul
		let mmm = HDMagAmmo(owner.FindInventory(injectortype));
		if (mmm) {
			mmm.Amount--;
			if (mmm.Amount < 1) { mmm.Destroy(); }
			else if (mmm.Mags.Size()) { mmm.Mags.Pop(); }
			return;
		}

		// for post-injector overhaul
		let spw = SpareWeapons(owner.FindInventory("SpareWeapons"));
		if (HDWeapon.GetActualAmount(owner, injectortype.GetClassName()) == 1 || !spw) {
			let item = owner.FindInventory(injectortype);
			item.Destroy();
			return;
		}

		int i = spw.weapontype.Find(injectortype.GetClassName());
		if (i == spw.weapontype.Size()) { return; }
		spw.weapontype.Delete(i);
		spw.weaponbulk.Delete(i);
		spw.weaponstatus.Delete(i);
	}

	void HandleSupplies() {
		if((owner.player.cmd.buttons & BT_ALTFIRE) && !(owner.player.oldbuttons & BT_ALTFIRE)) {

			switch (weaponstatus[TK_SELECTED]) {
				case T_PAINKILLER:
					if(owner.countinv("PortableStimpack") > 0) {
						TakeInjector("PortableStimpack");
						weaponstatus[TKS_PAINKILLER] += 20;
						currentmessage.text = Stringtable.Localize("$UI_TRK_PAINKILLER_REFILL");
						currentmessage.timeout = 2*35;
					}
					else {
						currentmessage.text = Stringtable.Localize("$UI_TRK_PAINKILLER_NOSTIMS");
						currentmessage.timeout = 2*35;
					}
					break;
				case T_SALINE:
					if(owner.countinv("SecondBlood") > 0) {
						TakeInjector("SecondBlood");
						weaponstatus[TKS_SALINE] += 1000;
						currentmessage.text = Stringtable.Localize("$UI_TRK_SALINE_REFILL");
						currentmessage.timeout = 2*35;
					}
					else {
						currentmessage.text = Stringtable.Localize("$UI_TRK_SALINE_NOBLOOD");
						currentmessage.timeout = 2*35;
					}
					break;
				case T_FORCEPS:
					break;
				case T_BIOFOAM:
				case T_STAPLER:
					if(owner.countinv("UaS_2FCartridge") > 0) {
						owner.TakeInventory("UaS_2FCartridge", 1);
						weaponstatus[TKS_BIOFOAM] += 200;
						weaponstatus[TKS_STAPLES] += 15;
						currentmessage.text = Stringtable.Localize("$UI_TRK_2FCARTRIDGE_REFILL");
						currentmessage.timeout = 2*35;
					}
					else {
						currentmessage.text = Stringtable.Localize("$UI_TRK_2FCARTRIDGE_NOCARTRIDGES");
						currentmessage.timeout = 2*35;
					}
					break;
				case T_SUTURES:
					break;
				case T_SCALPEL:
					break;
			}
		}
	}
}
