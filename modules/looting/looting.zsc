class UaS_SearchedCorpseMarker : Inventory {
	double searchedAmount;
}

class UaS_Looting_Handler : Inventory {
	int cooldown;
	double anglevel, pitchvel;

	default {
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.UNDROPPABLE;
		-INVENTORY.INVBAR;
		+INVENTORY.UNTOSSABLE;
	}

	override void BeginPlay() {
		super.BeginPlay();
		InitializeLootTables();
	}

	override void DoEffect() {
		super.DoEffect();
		if (!owner) { return; }
		if (owner.health <= 0) { return; }
		if (!owner.player.ReadyWeapon) { return; }

		if (TryingToSearch()) {
			FLineTraceData trace;
			owner.LineTrace(owner.angle, 32, owner.pitch, offsetz: (owner.height / 2), data: trace);
			if (trace.HitActor && trace.HitActor.bCorpse) {
				DoSearch(trace.HitActor);
				cooldown = max(cooldown - 1, 0);
			}
		}

		// Nudge owner angle/pitch
		owner.angle += anglevel;
		owner.pitch += pitchvel;
		anglevel *= 0.75;
		pitchvel *= 0.75;
	}

	bool TryingToSearch() {
		return (
			(owner.player.cmd.buttons & BT_USE) &&
			owner.player.ReadyWeapon.GetClassName() == "Ring" &&
			owner.player.CrouchFactor <= 0.5);
	}

	void DoSearch(actor searchTarget) {
		UaS_SearchedCorpseMarker searchMarker;
		if (!searchTarget) { return; }
		if (searchTarget.countinv("UaS_SearchedCorpseMarker") == 0) { searchTarget.GiveInventory("UaS_SearchedCorpseMarker", 1); }
		searchMarker = UaS_SearchedCorpseMarker(searchTarget.FindInventory("UaS_SearchedCorpseMarker"));
		if (!searchMarker) { return; }

		//Actually do the search
		if (cooldown == 0) {
			if (searchMarker.SearchedAmount >= 1.0) {
				HDWeapon currentWeapon = HDWeapon(owner.player.ReadyWeapon);
				currentWeapon.A_WeaponMessage("Nothing here.");
				return;
			}
			owner.A_PlaySound("weapons/pocket", frandom(0.0, 0.5));
			searchMarker.searchedAmount += frandom(0.05, 0.1);
			anglevel += frandom(-1, 1);
			pitchvel += frandom(-1, 1);
			cooldown = random(10,25);
			double chance = clamp(searchMarker.searchedAmount * UaS_LootingFactor, 0, 1);
			if (UaS.RandomChance(chance)) {
				if(SpawnLoot(searchTarget)) { searchMarker.searchedAmount += frandom(0.0, 1.0 - UaS_LootingFactor); }
			}
		}
	}

	bool SpawnLoot(actor spawnTarget) {
		int tableSize = 0;
		int lootIndex = 0;
		string LootClass = "";
		int minAmount = 0;
		int maxAmount = 0;
		double rarityFactor = 0;

		if(spawnTarget.CheckClass("ZombieStormtrooper", AAPTR_DEFAULT, true)) {
			int weapontype = ZombieStormtrooper(spawnTarget).firemode;
			switch(weapontype) {
				case -2:
					tableSize = ZombieStormtrooperSMGLoot.Size() - 1;
					lootIndex = random(0, tableSize);
					LootClass = ZombieStormtrooperSMGLoot[lootIndex].itemName;
					minAmount = ZombieStormtrooperSMGLoot[lootIndex].minAmount;
					maxAmount = ZombieStormtrooperSMGLoot[lootIndex].maxAmount;
					rarityFactor = ZombieStormtrooperSMGLoot[lootIndex].rarityFactor;
					break;
				default:
					tableSize = ZombieStormtrooperZM66Loot.Size() - 1;
					lootIndex = random(0, tableSize);
					LootClass = ZombieStormtrooperZM66Loot[lootIndex].itemName;
					minAmount = ZombieStormtrooperZM66Loot[lootIndex].minAmount;
					maxAmount = ZombieStormtrooperZM66Loot[lootIndex].maxAmount;
					rarityFactor = ZombieStormtrooperZM66Loot[lootIndex].rarityFactor;
					break;
			}
		}
		if(spawnTarget.CheckClass("HideousShotgunGuy", AAPTR_DEFAULT, true)) {
			int weapontype = HideousShotgunGuy(spawnTarget).wep;
			switch(weapontype) {
				case -1:
					tableSize = ZombieStormtrooperZM66Loot.Size() - 1;
					lootIndex = random(0, tableSize);
					LootClass = ZombieStormtrooperZM66Loot[lootIndex].itemName;
					minAmount = ZombieStormtrooperZM66Loot[lootIndex].minAmount;
					maxAmount = ZombieStormtrooperZM66Loot[lootIndex].maxAmount;
					rarityFactor = ZombieStormtrooperZM66Loot[lootIndex].rarityFactor;
					break;
				default:
					tableSize = HideousShotgunGuyLoot.Size() - 1;
					lootIndex = random(0, tableSize);
					LootClass = HideousShotgunGuyLoot[lootIndex].itemName;
					minAmount = HideousShotgunGuyLoot[lootIndex].minAmount;
					maxAmount = HideousShotgunGuyLoot[lootIndex].maxAmount;
					rarityFactor = HideousShotgunGuyLoot[lootIndex].rarityFactor;
					break;
			}
		}
		if(spawnTarget.CheckClass("DragonGuard", AAPTR_DEFAULT, true)) {
			tableSize = DragonGuardLoot.Size() - 1;
			lootIndex = random(0, tableSize);
			LootClass = DragonGuardLoot[lootIndex].itemName;
			minAmount = DragonGuardLoot[lootIndex].minAmount;
			maxAmount = DragonGuardLoot[lootIndex].maxAmount;
			rarityFactor = DragonGuardLoot[lootIndex].rarityFactor;
		}
		if(spawnTarget.CheckClass("HDMarine", AAPTR_DEFAULT, true)) {
			int weapontype = HDMarine(spawnTarget).wep;
			switch(weapontype) {
				case 1:
					tableSize = HDMarineZM66Loot.Size() - 1;
					lootIndex = random(0, tableSize);
					LootClass = HDMarineZM66Loot[lootIndex].itemName;
					minAmount = HDMarineZM66Loot[lootIndex].minAmount;
					maxAmount = HDMarineZM66Loot[lootIndex].maxAmount;
					rarityFactor = HDMarineZM66Loot[lootIndex].rarityFactor;
					break;
				case 2:
					tableSize = HDMarineHunterLoot.Size() - 1;
					lootIndex = random(0, tableSize);
					LootClass = HDMarineHunterLoot[lootIndex].itemName;
					minAmount = HDMarineHunterLoot[lootIndex].minAmount;
					maxAmount = HDMarineHunterLoot[lootIndex].maxAmount;
					rarityFactor = HDMarineHunterLoot[lootIndex].rarityFactor;
					break;
				case 3:
					tableSize = HDMarineSMGLoot.Size() - 1;
					lootIndex = random(0, tableSize);
					LootClass = HDMarineSMGLoot[lootIndex].itemName;
					minAmount = HDMarineSMGLoot[lootIndex].minAmount;
					maxAmount = HDMarineSMGLoot[lootIndex].maxAmount;
					rarityFactor = HDMarineSMGLoot[lootIndex].rarityFactor;
					break;
				case 4:
					tableSize = HDMarineRocketLoot.Size() - 1;
					lootIndex = random(0, tableSize);
					LootClass = HDMarineRocketLoot[lootIndex].itemName;
					minAmount = HDMarineRocketLoot[lootIndex].minAmount;
					maxAmount = HDMarineRocketLoot[lootIndex].maxAmount;
					rarityFactor = HDMarineRocketLoot[lootIndex].rarityFactor;
					break;
			}
		}

		// Actually spawn the picked thing and return true
		if (UaS.RandomChance(rarityFactor)) {
			if(UaS_Debug & Looting) { console.printf("Loot spawn: "..LootClass); }
			UaS.SpawnStuff(LootClass, random(minAmount, maxAmount), spawnTarget.pos, true);
			return true;
		}

		// Otherwise spawn some random debris and return false
		for (int i = 0; i < 3; i++) { spawnTarget.A_SpawnItemEx("TinyWallChunk", 0, 0, 4, random(4, 7), random(-2, 2), random(-2, 1), 0, SXF_NOCHECKPOSITION); }
		return false;
	}
}

class UaS_LootEntry {
	name itemName;
	int minAmount, maxAmount;
	double rarityFactor;

	static UaS_LootEntry create(name newName, int newMin, int newMax, double rarity) {
		UaS_LootEntry newEntry = new("UaS_LootEntry");
		newEntry.itemName = newName;
		newEntry.minAmount = newMin;
		newEntry.maxAmount = newMax;
		newEntry.rarityFactor = rarity;
		return newEntry;
	}
}

extend class UaS_Looting_Handler {
	Array<UaS_LootEntry> ZombieStormtrooperZM66Loot;
	Array<UaS_LootEntry> ZombieStormtrooperSMGLoot;
	Array<UaS_LootEntry> HideousShotgunGuyLoot;
	Array<UaS_LootEntry> DragonGuardLoot;
	Array<UaS_LootEntry> HDMarineZM66Loot;
	Array<UaS_LootEntry> HDMarineHunterLoot;
	Array<UaS_LootEntry> HDMarineSMGLoot;
	Array<UaS_LootEntry> HDMarineRocketLoot;

	void InitializeLootTables() {
		// ZombieStormtrooper Loot Table
		// ZM66 (also ZM66 Jackboot)
		ZombieStormtrooperZM66Loot.push(UaS_LootEntry.create("FourMilAmmo", 1, 15, 1.0));
		ZombieStormtrooperZM66Loot.push(UaS_LootEntry.create("HDPistolAmmo", 1, 5, 1.0));
		ZombieStormtrooperZM66Loot.push(UaS_LootEntry.create("HD4mMag", 1, 1, 0.75));
		ZombieStormtrooperZM66Loot.push(UaS_LootEntry.create("HD9mMag15", 1, 1, 0.75));
		ZombieStormtrooperZM66Loot.push(UaS_LootEntry.create("PortableStimpack", 1, 1, 0.5));
		// SMG
		ZombieStormtrooperSMGLoot.push(UaS_LootEntry.create("HDPistolAmmo", 1, 15, 1.0));
		ZombieStormtrooperSMGLoot.push(UaS_LootEntry.create("HD9mMag15", 1, 1, 0.75));
		ZombieStormtrooperSMGLoot.push(UaS_LootEntry.create("HD9mMag30", 1, 1, 0.75));
		ZombieStormtrooperSMGLoot.push(UaS_LootEntry.create("PortableStimpack", 1, 1, 0.5));
		ZombieStormtrooperSMGLoot.push(UaS_LootEntry.create("HDFragGrenadeAmmo", 1, 1, 0.5));

		// HideousShotgunGuy Loot Table
		// Hunter and Slayer
		HideousShotgunGuyLoot.push(UaS_LootEntry.create("HDShellAmmo", 1, 8, 1.0));
		HideousShotgunGuyLoot.push(UaS_LootEntry.create("ShellPickup", 1, 1, 0.75));
		HideousShotgunGuyLoot.push(UaS_LootEntry.create("PortableStimpack", 1, 1, 0.5));

		// DragonGuard Loot Table
		DragonGuardLoot.push(UaS_LootEntry.create("HD4mMag", 1, 2, 1.0));
		DragonGuardLoot.push(UaS_LootEntry.create("HDBattery", 1, 1, 0.5));
		DragonGuardLoot.push(UaS_LootEntry.create("PortableStimpack", 1, 1, 0.5));

		// Marine/Tango Loot Table
		// ZM66
		HDMarineZM66Loot.push(UaS_LootEntry.create("FourMilAmmo", 1, 15, 1.0));
		HDMarineZM66Loot.push(UaS_LootEntry.create("HDPistolAmmo", 1, 5, 1.0));
		HDMarineZM66Loot.push(UaS_LootEntry.create("HD4mMag", 1, 1, 0.75));
		HDMarineZM66Loot.push(UaS_LootEntry.create("HD9mMag15", 1, 1, 0.75));
		HDMarineZM66Loot.push(UaS_LootEntry.create("PortableStimpack", 1, 1, 0.5));
		HDMarineZM66Loot.push(UaS_LootEntry.create("HDFragGrenadeAmmo", 1, 1, 0.5));
		HDMarineZM66Loot.push(UaS_LootEntry.create("HDRocketAmmo", 1, 1, 0.5));
		HDMarineZM66Loot.push(UaS_LootEntry.create("PortableMedikit", 1, 1, 0.25));
		// Hunter
		HDMarineHunterLoot.push(UaS_LootEntry.create("HDShellAmmo", 2, 8, 1.0));
		HDMarineHunterLoot.push(UaS_LootEntry.create("HDPistolAmmo", 1, 5, 1.0));
		HDMarineHunterLoot.push(UaS_LootEntry.create("ShellPickup", 1, 1, 0.75));
		HDMarineHunterLoot.push(UaS_LootEntry.create("HD9mMag15", 1, 1, 0.75));
		HDMarineHunterLoot.push(UaS_LootEntry.create("PortableStimpack", 1, 1, 0.5));
		HDMarineHunterLoot.push(UaS_LootEntry.create("HDFragGrenadeAmmo", 1, 1, 0.5));
		HDMarineHunterLoot.push(UaS_LootEntry.create("HDRocketAmmo", 1, 1, 0.5));
		HDMarineHunterLoot.push(UaS_LootEntry.create("PortableMedikit", 1, 1, 0.25));
		// SMG
		HDMarineSMGLoot.push(UaS_LootEntry.create("HDPistolAmmo", 5, 15, 1.0));
		HDMarineSMGLoot.push(UaS_LootEntry.create("HD9mMag15", 1, 1, 0.75));
		HDMarineSMGLoot.push(UaS_LootEntry.create("HD9mMag30", 1, 1, 0.75));
		HDMarineSMGLoot.push(UaS_LootEntry.create("PortableStimpack", 1, 1, 0.5));
		HDMarineSMGLoot.push(UaS_LootEntry.create("HDFragGrenadeAmmo", 1, 1, 0.5));
		HDMarineSMGLoot.push(UaS_LootEntry.create("HDRocketAmmo", 1, 1, 0.5));
		HDMarineSMGLoot.push(UaS_LootEntry.create("PortableMedikit", 1, 1, 0.25));
		//Rocket
		HDMarineRocketLoot.push(UaS_LootEntry.create("HDPistolAmmo", 1, 5, 1.0));
		HDMarineRocketLoot.push(UaS_LootEntry.create("HDRocketAmmo", 1, 4, 1.0));
		HDMarineRocketLoot.push(UaS_LootEntry.create("PortableStimpack", 1, 1, 0.5));
		HDMarineRocketLoot.push(UaS_LootEntry.create("HDFragGrenadeAmmo", 1, 1, 0.5));
		HDMarineRocketLoot.push(UaS_LootEntry.create("PortableMedikit", 1, 1, 0.25));
	}
}
