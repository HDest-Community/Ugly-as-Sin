// generic medical tool
class UaS_MedicalTool : HDWeapon {
	StatusInfo currentMessage; // used for UI messages

	UaS_MedicalWheel wheel;
	UaS_MedicalToolInfo mti;

	Default {
		+Weapon.WIMPY_WEAPON;
		+Weapon.NO_AUTO_SWITCH;
		Weapon.SlotNumber 9;
	}

	struct StatusInfo {
		string text;
		int timeout;
	}
}

class UaS_MedicalToolInfo : Inventory {
	UaS_WoundHandler wh;
	HDPlayerPawn patient, lastpatient;
	UaS_Wound currentWound;
	int currentWoundIdx;

	transient CVar UaS_Medical_SwitchZoom;
	transient CVar UaS_Medical_SwitchFiremode;
	transient CVar UaS_Medical_InvertCycle;

	// checks and set tool info
	static void SetToolInfo(out UaS_MedicalToolInfo mti, HDPlayerPawn hpl)
	{
		if (mti && mti.owner == hpl) { return; }
		mti = UaS_MedicalToolInfo(hpl.FindInventory("UaS_MedicalToolInfo"));
		if (!mti) { Console.PrintF("could not find tool info!!! something is horribly wrong"); }
	}

	override void BeginPlay() {
		currentWoundIdx = 0;
		Super.BeginPlay();
	}

	override void DoEffect() {
		// Make sure currentWoundIdx doesn't wrap around to 0 when updating
		if (wh && wh.critwounds.Size() > 0) { currentWoundIdx = min(currentWoundIdx, wh.critwounds.Size() - 1); }
		if (!currentWound) { UpdateCurrentWound(currentWoundIdx); }
		if (!UaS_Medical_SwitchZoom) {
			UaS_Medical_SwitchZoom = CVar.GetCVar("UaS_Medical_SwitchZoom", owner.player);
			UaS_Medical_SwitchFiremode = CVar.GetCVar("UaS_Medical_SwitchFiremode", owner.player);
			UaS_Medical_InvertCycle = CVar.GetCVar("UaS_Medical_InvertCycle", owner.player);
		}
	}

	void UpdateCurrentWound(int idx) {
		if (!wh || wh.critwounds.Size() <= 0) { currentWound = null; currentWoundIdx = 0; return; }

		currentWoundIdx = idx % wh.critwounds.Size();
		if (currentWoundIdx < 0) { currentWoundIdx = wh.critwounds.Size() - 1; }
		currentWound = wh.critwounds[currentWoundIdx];
	}

	void SetPatient() {
		HDPlayerPawn other;
		FLineTraceData tktrace;
		owner.LineTrace(owner.angle, 42, owner.pitch, offsetz: owner.height-12, data: tktrace);
		if (tktrace.hitactor && tktrace.hitactor is "HDPlayerPawn") { other = HDPlayerPawn(tktrace.hitactor); }

		if (other && PressedKey(KEY_SETPATIENT, false)) { patient = other; }
		if (!patient || levellocals.Vec3Diff(owner.pos, patient.pos).length() > owner.radius * 4) { patient = HDPlayerPawn(owner); }

		wh = UaS_WoundHandler(patient.FindInventory('UaS_WoundHandler'));
		if (!wh) { console.printf("No wound handler!"); return; }
		if (patient != lastpatient) { UpdateCurrentWound(0); }
		lastpatient = patient;
	}

	UaS_Wound GetWound(int index) {
		if (wh.critwounds.size() <= 0) { return null; }
		return wh.critwounds[index];
	}

	bool PressedKey(int type, bool justPressed) {
		if (!UaS_Medical_SwitchZoom) { DoEffect(); } // ensure that cvars are loaded
		int bt = 0;
		switch (type) {
			case KEY_SETPATIENT:
				if (UaS_Medical_SwitchZoom.GetBool()) { bt = BT_ALTFIRE; }
				else { bt = BT_ZOOM; }
				break;

			case KEY_FIRE:
				bt = BT_ATTACK;
				break;

			case KEY_ALTFIRE:
				if (UaS_Medical_SwitchZoom.GetBool()) { bt = BT_ZOOM; }
				else { bt = BT_ALTFIRE; }
				break;

			case KEY_CYCLENEXT:
				if (UaS_Medical_InvertCycle.GetBool()) { bt = BT_ALTRELOAD; }
				else { bt = BT_RELOAD; }
				break;

			case KEY_CYCLEPREV:
				if (UaS_Medical_InvertCycle.GetBool()) { bt = BT_RELOAD; }
				else { bt = BT_ALTRELOAD; }
				break;

			case KEY_FIREMODE:
				if (UaS_Medical_SwitchFiremode.GetBool()) { return !(owner.player.cmd.buttons & BT_FIREMODE); }
				else { bt = BT_FIREMODE; }
				break;
		}
		if (justPressed) { return (owner.player.cmd.buttons & bt && !(owner.player.oldbuttons & bt)); }
		return (owner.player.cmd.buttons & bt);
	}

	ui string GetStatusColor(int amount) {
		if (amount >= 90) { return Stringtable.Localize("$UI_STATUS_BLACK"); }
		if (amount >= 80) { return Stringtable.Localize("$UI_STATUS_DARKRED"); }
		if (amount >= 70) { return Stringtable.Localize("$UI_STATUS_BRICK"); }
		if (amount >= 60) { return Stringtable.Localize("$UI_STATUS_FIRE"); }
		if (amount >= 50) { return Stringtable.Localize("$UI_STATUS_ORANGE"); }
		if (amount >= 40) { return Stringtable.Localize("$UI_STATUS_YELLOW"); }
		if (amount >= 30) { return Stringtable.Localize("$UI_STATUS_DARKBROWN"); }
		if (amount >= 20) { return Stringtable.Localize("$UI_STATUS_DARKGREEN"); }
		if (amount >= 10) { return Stringtable.Localize("$UI_STATUS_GREEN"); }
		if (amount >= 0) { return Stringtable.Localize("$UI_STATUS_GREY"); }
		return Stringtable.Localize("$UI_STATUS_WHITE");
	}

	ui string GetOpenStatus(UaS_Wound currentWound) {
		string statusText;
		if (currentWound.depth <= 0. && currentWound.patched > 0) { statusText = "$UI_WOUND_PATCHED"; }
		else if (currentWound.patched > 0.) { statusText = statusText..Stringtable.Localize("$UI_WOUND_SOMEWHATPATCHED"); }
		else if (currentWound.depth <= 0) { statusText = "$UI_WOUND_SEALED"; }
		else { statusText = "$UI_WOUND_OPEN"; }

		return string.Format(Stringtable.Localize(statusText), GetStatusColor(currentWound.open / 15 * 100));
	}

	ui string GetStabilityStatus(UaS_Wound currentWound) {
		string statusText;
		if (currentWound.stabilised >= 100.0) { statusText = "$UI_STABILITY_FINE"; }
		else if (currentWound.stabilised > 75.0) { statusText = "$UI_STABILITY_SOMEWHATFINE"; }
		else if (currentWound.stabilised > 50.0) { statusText = "$UI_STABILITY_DECENT"; }
		else if (currentWound.stabilised > 25.0) { statusText = "$UI_STABILITY_NOTTHATGREAT"; }
		else if (currentWound.stabilised > 5.0) { statusText = "$UI_STABILITY_LESSHORRIBLE"; }
		else { statusText = "$UI_STABILITY_HORRIBLE"; }

		return String.Format(Stringtable.Localize(statusText), GetStatusColor(100 - currentWound.stabilised));
	}

	enum MedicalToolKeys {
		KEY_SETPATIENT,
		KEY_FIRE,
		KEY_ALTFIRE,
		KEY_CYCLENEXT,
		KEY_CYCLEPREV,
		KEY_FIREMODE,
	};
}
