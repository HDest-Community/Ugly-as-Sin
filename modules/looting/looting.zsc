class UaS_SearchedCorpseMarker : Inventory {
	double searchedAmount;
}

class UaS_Looting_Handler : Inventory {
	int cooldown;
	double anglevel, pitchvel;

	default {
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.UNDROPPABLE;
		-INVENTORY.INVBAR;
		+INVENTORY.UNTOSSABLE;
	}

	override void BeginPlay() {
		super.BeginPlay();
		InitializeLootTables();
	}

	override void DoEffect() {
		super.DoEffect();
		if (!owner) { return; }
		if (owner.health <= 0) { return; }
		if (!owner.player.ReadyWeapon) { return; }

		if (TryingToSearch()) {
			FLineTraceData trace;
			owner.LineTrace(owner.angle, 32, owner.pitch, offsetz: (owner.height / 2), data: trace);
			if (trace.HitActor && trace.HitActor.bCorpse) {
				DoSearch(trace.HitActor);
				cooldown = max(cooldown - 1, 0);
			}
		}

		// Nudge owner angle/pitch
		owner.angle += anglevel;
		owner.pitch += pitchvel;
		anglevel *= 0.75;
		pitchvel *= 0.75;
	}

	bool TryingToSearch() {
		return (
			(owner.player.cmd.buttons & BT_USE) &&
			owner.player.ReadyWeapon.GetClassName() == "Ring" &&
			owner.player.CrouchFactor <= 0.5);
	}

	void DoSearch(actor searchTarget) {
		UaS_SearchedCorpseMarker searchMarker;
		if (!searchTarget) { return; }
		if (searchTarget.countinv("UaS_SearchedCorpseMarker") == 0) { searchTarget.GiveInventory("UaS_SearchedCorpseMarker", 1); }
		searchMarker = UaS_SearchedCorpseMarker(searchTarget.FindInventory("UaS_SearchedCorpseMarker"));
		if (!searchMarker) { return; }

		//Actually do the search
		if (cooldown == 0) {
			if (searchMarker.SearchedAmount >= 1.0) {
				HDWeapon currentWeapon = HDWeapon(owner.player.ReadyWeapon);
				currentWeapon.A_WeaponMessage("Nothing here.");
				return;
			}
			owner.A_PlaySound("weapons/pocket", frandom(0.0, 0.5));
			searchMarker.searchedAmount += frandom(0.05, 0.1);
			anglevel += frandom(-1, 1);
			pitchvel += frandom(-1, 1);
			cooldown = random(10,25);
			if (UaS.RandomChance(clamp(searchMarker.searchedAmount * UaS_LootingFactor), 0, 1)) {
				if(SpawnLoot(searchTarget)) { searchMarker.searchedAmount += frandom(0.0, 1.0 - UaS_LootingFactor); }
			}
		}
	}

	void SpawnLoot(actor spawnTarget) {
		int tableSize;
		int lootIndex;
		string LootClass;
		int minAmount;
		int maxAmount;
		double rarityFactor;

		if(spawnTarget.CheckClass("ZombieStormtrooper", AAPTR_DEFAULT, true)) {
			tableSize = ZombieStormtrooperLoot.Size() - 1;
			lootIndex = random(0, tableSize);
			LootClass = ZombieStormtrooperLoot[lootIndex].itemName;
			minAmount = ZombieStormtrooperLoot[lootIndex].minAmount;
			maxAmount = ZombieStormtrooperLoot[lootIndex].maxAmount;
			rarityFactor = ZombieStormtrooperLoot[lootIndex].rarityFactor;
		}
		if(spawnTarget.CheckClass("HideousShotgunGuy", AAPTR_DEFAULT, true)) {
			tableSize = HideousShotgunGuyLoot.Size() - 1;
			lootIndex = random(0, tableSize);
			LootClass = HideousShotgunGuyLoot[lootIndex].itemName;
			minAmount = HideousShotgunGuyLoot[lootIndex].minAmount;
			maxAmount = HideousShotgunGuyLoot[lootIndex].maxAmount;
			rarityFactor = HideousShotgunGuyLoot[lootIndex].rarityFactor;
		}
		if(spawnTarget.CheckClass("DragonGuard", AAPTR_DEFAULT, true)) {
			tableSize = DragonGuardLoot.Size() - 1;
			lootIndex = random(0, tableSize);
			LootClass = DragonGuardLoot[lootIndex].itemName;
			minAmount = DragonGuardLoot[lootIndex].minAmount;
			maxAmount = DragonGuardLoot[lootIndex].maxAmount;
			rarityFactor = DragonGuardLoot[lootIndex].rarityFactor;
		}
		if(spawnTarget.CheckClass("HDMarine", AAPTR_DEFAULT, true)) {
			tableSize = HDMarineLoot.Size() - 1;
			lootIndex = random(0, tableSize);
			LootClass = HDMarineLoot[lootIndex].itemName;
			minAmount = HDMarineLoot[lootIndex].minAmount;
			maxAmount = HDMarineLoot[lootIndex].maxAmount;
			rarityFactor = HDMarineLoot[lootIndex].rarityFactor;
		}

		// Actually spawn the picked thing
		if (UaS.RandomChance(rarityFactor)) {
			UaS.SpawnStuff(LootClass, random(minAmount, maxAmount), (spawnTarget.pos.x, spawnTarget.pos.y, spawnTarget.pos.z + 1), true);
		}
		else {
			for (int i = 0; i < 3; i++) {
				spawnTarget.A_SpawnItemEx("TinyWallChunk", 0, 0, 4, random(4, 7), random(-2, 2), random(-2, 1), 0, SXF_NOCHECKPOSITION);
			}
		}
	}
}

class UaS_LootEntry {
	name itemName;
	int minAmount, maxAmount;
	double rarityFactor;

	static UaS_LootEntry create(name newName, int newMin, int newMax, double rarity) {
		UaS_LootEntry newEntry = new("UaS_LootEntry");
		newEntry.itemName = newName;
		newEntry.minAmount = newMin;
		newEntry.maxAmount = newMax;
		newEntry.rarityFactor = rarity;
		return newEntry;
	}
}

extend class UaS_Looting_Handler {
	Array<UaS_LootEntry> ZombieStormtrooperLoot;
	Array<UaS_LootEntry> HideousShotgunGuyLoot;
	Array<UaS_LootEntry> DragonGuardLoot;
	Array<UaS_LootEntry> HDMarineLoot;

	void InitializeLootTables() {
		// ZombieStormtrooper Loot Table
		ZombieStormtrooperLoot.push(UaS_LootEntry.create('FourMilAmmo',1,10,1.0));
		ZombieStormtrooperLoot.push(UaS_LootEntry.create("HDPistolAmmo",1,5,1.0));
		ZombieStormtrooperLoot.push(UaS_LootEntry.create("PortableStimpack",1,1,0.5));
		ZombieStormtrooperLoot.push(UaS_LootEntry.create("HDFragGrenadeAmmo",1,1,0.5));
		ZombieStormtrooperLoot.push(UaS_LootEntry.create("HD4mMag",1,1,0.5));
		ZombieStormtrooperLoot.push(UaS_LootEntry.create("HD9mMag15",1,1,0.5));
		ZombieStormtrooperLoot.push(UaS_LootEntry.create("HD9mMag30",1,1,0.5));

		// HideousShotgunGuy Loot Table
		HideousShotgunGuyLoot.push(UaS_LootEntry.create("HDShellAmmo",1,5,1.0));
		HideousShotgunGuyLoot.push(UaS_LootEntry.create("HDPistolAmmo",1,5,1.0));
		HideousShotgunGuyLoot.push(UaS_LootEntry.create("PortableStimpack",1,1,0.5));
		HideousShotgunGuyLoot.push(UaS_LootEntry.create("HDFragGrenadeAmmo",1,1,0.5));
		HideousShotgunGuyLoot.push(UaS_LootEntry.create("ShellPickup",1,1,0.5));
		HideousShotgunGuyLoot.push(UaS_LootEntry.create("HD9mMag15",1,1,0.5));

		// DragonGuard Loot Table
		DragonGuardLoot.push(UaS_LootEntry.create("HDPistolAmmo",1,5,1.0));
		DragonGuardLoot.push(UaS_LootEntry.create("PortableStimpack",1,1,0.5));
		DragonGuardLoot.push(UaS_LootEntry.create("HDFragGrenadeAmmo",1,1,0.5));
		DragonGuardLoot.push(UaS_LootEntry.create("HD4mMag",2,1,0.5));
		DragonGuardLoot.push(UaS_LootEntry.create("HD9mMag15",1,1,0.5));
		DragonGuardLoot.push(UaS_LootEntry.create("HDBattery",1,1,0.5));

		// Marine/Tango Loot Table
		HDMarineLoot.push(UaS_LootEntry.create("HDPistolAmmo",1,5,1.0));
		HDMarineLoot.push(UaS_LootEntry.create("SevenMilAmmo",1,10,0.8));
		HDMarineLoot.push(UaS_LootEntry.create("PortableStimpack",1,1,0.5));
		HDMarineLoot.push(UaS_LootEntry.create("HDFragGrenadeAmmo",1,1,0.5));
		HDMarineLoot.push(UaS_LootEntry.create("HD4mMag",1,1,0.5));
		HDMarineLoot.push(UaS_LootEntry.create("HD7mMag",1,1,0.4));
		HDMarineLoot.push(UaS_LootEntry.create("LiberatorEmptyMag",1,1,0.4));
		HDMarineLoot.push(UaS_LootEntry.create("HD7mClip",1,1,0.4));
		HDMarineLoot.push(UaS_LootEntry.create("HD9mMag15",1,1,0.5));
	}
}
