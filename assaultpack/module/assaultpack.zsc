const UAS_HDLD_ASSAULTPACK = "apk";
const UAS_STRIP_ASSAULTPACK = STRIP_BACKPACK;

//==================================================
// Base Definition
//==================================================
class UaS_AssaultPack : HDBackpack {
	default {
		tag "$TAG_ASSAULTPACK";
		HDBackpack.MaxCapacity 500;
		Inventory.Icon "UGSQA0";
		Inventory.PickupMessage "$PICKUP_ASSAULTPACK";
		scale 0.75;
		hdweapon.wornlayer UAS_STRIP_ASSAULTPACK;
		hdweapon.refid UAS_HDLD_ASSAULTPACK;
	}

	override void BeginPlay(){
		Super.BeginPlay();
		if(Storage) Storage.destroy();
		Storage = new('UaS_AssaultPackStorage');
		UpdateCapacity();
	}

	override void DoEffect() {
		super.DoEffect();
		UpdateCapacity();
	}

	override double WeaponBulk() {
		return max((Storage ? Storage.TotalBulk * 0.80 : 0), 50);
	}

	override void UpdateCapacity() {
		MaxCapacity = default.MaxCapacity;
		Storage.MaxBulk = min(Storage.TotalBulk + 75, MaxCapacity);
	}

	override bool IsBeingWorn() { return true; }

	override string, double GetPickupSprite() { return "UGSQA0", 1.0; }

	States {
		Spawn:
			UGSQ ABC -1 NoDelay
			{
				if (invoker.Storage.TotalBulk ~== 0)
				{
					frame = 1;
				}
				else if (target)
				{
					translation = target.translation;
					frame = 2;
				}
				invoker.bNO_AUTO_SWITCH = false;
			}
			Stop;
	}
}

class UaS_AssaultPackStorage : ItemStorage {
	override string GetFailMessage() {
		if (MaxBulk < 500) {
			return Stringtable.Localize("$ASSAULTPACK_TOOLARGE");
		}
		return Stringtable.Localize("$ASSAULTPACK_TOOFULL");
	}
}
