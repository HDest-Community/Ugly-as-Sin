extend class UaS_Scarcity_Handler {
	bool MobLoot(Actor inObject) {
		if (!UaS_ScarcityLooting) { return false; }
		HDPickup mo = HDPickup(inObject);
		if (!mo) { return false; }
		//Find nearby mobs to the object
		let mobFinder = BlockThingsIterator.Create(mo, 256);
		array<HDMobBase> mobArray;
		// build a list of mobs
		while(mobFinder.Next()) {
			HDMobBase mft = HDMobBase(mobFinder.thing);
			bool ValidMob = (mft
				&& mft.bBiped == true
				&& mft.mass > mo.bulk*5
				&& !mft.bNoGravity
				&& mft.FindInventory("HDPickup", true)==null);
			if(ValidMob) {
				mobArray.push(mft);
			}
		}

		// Decide based on if mobs were found
		bool pickedUp = false;
		HDMobBase mb;
		while (mobArray.Size()>0 && !pickedUp) {
			int mobIndex = mobArray.Size()-1;
			mb = mobArray[mobIndex];
			if (mb && mo) {
				//Move item to mob's array
				bool CanReach = mb.checkmove(mo.pos.xy,PCM_DROPOFF);
				if (CanReach) {
					vector3 oldmopos = mo.pos;
					mo.setorigin(mb.pos,false);
					pickedUp = mo.CallTryPickup(mb);
					if (pickedUp) {
						dbgMsg = dbgMsg.."\n\tâ€¢ "..mo.getclassname()..int(oldmopos.length()).." added to "..mb.getclassname()..int(mb.pos.length()).."'s inventory";
					}
					else {
						mo.setorigin(oldmopos,false);
					}
				}
			}
			mobArray.delete(mobIndex);
		}
		return pickedUp;
	}
}
