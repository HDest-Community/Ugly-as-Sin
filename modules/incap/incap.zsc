class UaS_Incap_Handler : Inventory {
	int bleedout;
	bool incap;
	int incap_woundcount;
	int incap_burncount;
	int incap_unstablewoundcount;
	int incap_oldwoundcount;
	int incap_aggravateddamage;

	default {
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.UNDROPPABLE;
		-INVENTORY.INVBAR;
	}

	override void PostBeginPlay() {
		bleedout = 4200;
	}

	override void DoEffect() {
		super.DoEffect();
		if(!multiplayer || deathmatch) { return; }

		let owner = HDPlayerPawn(owner);
		switch(incap) {

			// Normal
			case false:
				bleedout = min(bleedout + 1, 4200);

				// Activate incap shield
				if(bleedout == 4200 && owner.bBUDDHA == false) {
					owner.bBUDDHA = true;
					if(UaS_Debug & Incap) { owner.A_Log("Incap shield active"); }
				}

				// Enter incap state
				if(owner.health == 1 && owner.stimcount < 20) {
					incap = true;
					incap_woundcount = owner.woundcount;
					incap_burncount = owner.burncount;
					incap_unstablewoundcount = owner.unstablewoundcount;
					incap_oldwoundcount = owner.oldwoundcount;
					incap_aggravateddamage = owner.aggravateddamage;
					owner.stimcount = 0;
					if(UaS_Debug & InCap) { owner.A_Log("Incapacitated"); }
				}
				break;

			// Incapacitation
			case true:
				bleedout = max(bleedout - 1, 0);

				// Clamp important attributes
				owner.health = clamp(owner.health, 1, 1);
				owner.player.CrouchFactor = clamp(owner.player.CrouchFactor, 0.5, 0.5);
				owner.woundcount = clamp(owner.woundcount, 0, incap_woundcount);
				owner.burncount = clamp(owner.burncount, 0, incap_burncount);
				owner.unstablewoundcount = clamp(owner.unstablewoundcount, 0, incap_unstablewoundcount);
				owner.oldwoundcount = clamp(owner.oldwoundcount, 0, incap_oldwoundcount);
				owner.aggravateddamage = clamp(owner.aggravateddamage, 0, incap_aggravateddamage);
				owner.A_SelectWeapon("Ring");

				// Kill player if they bleed out
				if(bleedout == 0 ) {
					incap = false;
					owner.bBUDDHA = false;
					owner.A_Die('bleedout');
				}

				// Exit incap state
				if(owner.stimcount >= 10) {
					incap = false;
					owner.health += 1;
					owner.bBUDDHA = false;
					owner.stimcount = 0;
					if(UaS_Debug & incap) { owner.A_Log("Revived"); }
				}
				break;
		}
	}
}
