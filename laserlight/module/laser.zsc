const UAS_HDLD_LASERLIGHT = "llm";

class UaS_LaserLightModule : HDWeapon {
	int modeLight, modeLaser;
	bool activated;
	UaS_LLM_Emitter emitter;
	UaS_LLM_BounceLight lbounce, fbounce;
	vector3 oldsc;
	double offset,heightfactor;
	double angleoffset,pitchoffset;
	color LaserColor;
	double LaserAlpha;
	FSpawnParticleParams LP, FP;
	transient cvar beams;
	transient cvar laserpref, lasercolorpref, lightpref;

	double lastangle, lastpitch;
	vector3 lastpos, lastvel;

	default {
		radius 3;
		height 3;
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.PickupMessage "$PICKUP_LLM";
		Inventory.Icon "UGSIe0";
		HDWeapon.refid UAS_HDLD_LASERLIGHT;
		tag "$TAG_LLM";
		scale 0.5;
		+INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
		+WEAPON.NO_AUTO_SWITCH;
		+hdweapon.fitsinbackpack;
	}

	override double weaponbulk() { return 5; }

	states {
		spawn:
			UGSI E -1;
			stop;
	}

	void ToggleSwitch() {
		ToggleSound();
		activated = !activated;
	}

	void ToggleSound() {
		owner.A_StartSound("UaS/llm/toggle",
			CHAN_AUTO,
			CHANF_OVERLAP,
			volume: frandom[llm](0.8,1.0),
			attenuation: ATTN_STATIC,
			pitch: frandom[llm](0.9, 1.1));
	}

	override void PostBeginPlay() {
		super.PostBeginPlay();
		offset = 12;
	}

	override bool Use(bool pickup) {
		if (owner.player.cmd.buttons & BT_USE) {
			return super.Use(pickup);
		}
		ToggleSwitch();
		return false;
	}

	override void DoEffect() {
		if (!emitter) { emitter = UaS_LLM_Emitter(actor.spawn("UaS_LLM_Emitter", owner.pos, false)); }
		if (owner is 'PlayerPawn') { Configuring(); }
		UpdateEmitter();
		ProcessIntents();
		GetDefaults(owner, 1);
		if(activated && owner.health > 0) {
			Light(modeLight);
			Laser(modeLaser);
		}
		else {
			Light(0);
			Laser(0);
		}
		super.doEffect();
		lastangle = emitter.angle;
		lastpitch = emitter.pitch;
		lastpos = emitter.pos;
		lastvel = emitter.vel;
	}

	void Configuring() {
		if (!(owner.player.readyweapon is 'UaS_LaserLightModule')) { return; }
		bool pressingAttack = ((owner.player.cmd.buttons & BT_ATTACK) && !(owner.player.oldbuttons & BT_ATTACK));
		bool pressingAltAttack = ((owner.player.cmd.buttons & BT_ALTATTACK) && !(owner.player.oldbuttons & BT_ALTATTACK));
		if (pressingAttack) { modeLight = (modeLight + 1) % 3; ToggleSound(); }
		if (pressingAltAttack) { modeLaser = (modeLaser + 1) % 3; ToggleSound(); }
		string modeLightName, modeLaserName, modeLaserColor;
		switch (modeLaser) {
			case 0: modeLaserName = Stringtable.Localize("$LLM_OFF"); break;
			case 1: modeLaserName = Stringtable.Localize("$LLM_VISIBLE"); break;
			case 2: modeLaserName = Stringtable.Localize("$LLM_IRONLY"); break;
		}
		switch (modeLight) {
			case 0: modeLightName = Stringtable.Localize("$LLM_OFF"); break;
			case 1: modeLightName = Stringtable.Localize("$LLM_VISIBLE"); break;
			case 2: modeLightName = Stringtable.Localize("$LLM_IRONLY"); break;
			case 3: modeLightName = Stringtable.Localize("$LLM_FLASHING"); break;
		}
		if (LaserColor == "FF 00 00") { modeLaserColor = "Red (650 nm, 670 nm)"; }
		else if (LaserColor == "FF 1B 00") { modeLaserColor = "\cgRed (638 nm)"; }
		else if (LaserColor == "FF CC 00") { modeLaserColor = "\ckYellow-Orange (593 nm)"; }
		else if (LaserColor == "FF DC 00") { modeLaserColor = "\ckYellow (589 nm)"; }
		else if (LaserColor == "50 FF 00") { modeLaserColor = "\cdGreen (532 nm)"; }
		else if (LaserColor == "24 FF 00") { modeLaserColor = "\cdGreen (520 nm)"; }
		else if (LaserColor == "12 FF 00") { modeLaserColor = "\cdGreen (515 nm)"; }
		else if (LaserColor == "00 F5 FF") { modeLaserColor = "\chBlue (488 nm)"; }
		else if (LaserColor == "00 A8 FF") { modeLaserColor = "\chBlue (473 nm)"; }
		else if (LaserColor == "00 33 FF") { modeLaserColor = "\chBlue (450 nm)"; }
		else if (LaserColor == "54 00 D9") { modeLaserColor = "\ctViolet (405 nm)"; }
		else { modeLaserColor = "Custom"; }
		string statusMessage = Stringtable.Localize("$LLM_TOP")
			..Stringtable.Localize("$LLM_LIGHTMODE")..modeLightName.."\n"
			..Stringtable.Localize("$LLM_LASERMODE")..modeLaserName.."\n"
			..Stringtable.Localize("$LLM_LASERCOLOR")..modeLaserColor.."\n\n";
		if (activated) { statusMessage=statusMessage..Stringtable.Localize("$LLM_ACTIVATED"); }
		else { statusMessage=statusMessage..Stringtable.Localize("$LLM_DEACTIVATED"); }
		A_WeaponMessage(statusMessage);
	}

	void ProcessIntents() {
		UaS_Intent oi;
		oi = UaS.GetIntent("LLM_Toggle", owner);
		if (oi) {
			if (oi.Payload ~== "On") { activated = true; }
			else if (oi.Payload ~== "Off") { activated = false; }
			else { ToggleSwitch(); }
			oi.Clear();
		}

		oi = UaS.GetIntent("LLM_ModeSwitch", owner);
		if (oi) {
			int m = oi.Payload.ToInt(10);
			switch(m) {
				case 0: modeLaser = 0; modeLight = 1; break;
				case 1: modeLaser = 1; modeLight = 0; break;
				case 2: modeLaser = 1; modeLight = 1; break;
				case 3: modeLaser = 0; modeLight = 3; break;
			}
			oi.Clear();
		}
	}

	void UpdateEmitter() {
		vector3 newpos;
		double newangle, newpitch;
		if (owner is "HDPlayerPawn") {
			HDPlayerPawn p = HDPlayerPawn(owner);
			actor sc = p.scopecamera;
			if (!p || !sc) { return; }
			vector3 gunpos = HDMath.GetGunPos(owner);
			newpos = owner.vec3Angle(
				offset * cos(-sc.pitch) + 4 * sin(-sc.pitch),
				sc.angle,
				offset * sin(-sc.pitch) + ((owner.player.viewz - owner.pos.z) - 4));
			newpos.z = min(
				newpos.z,
				owner.pos.z + gunpos.z - 2);
				// owner.pos.z + HDWeapon(HDPlayerPawn(owner).player.readyweapon).GetShootOffset(owner));
			newangle = sc.angle;
			newpitch = sc.pitch;
		}
		else {
			bool BotClass = (
				owner is "HERPBot" ||
				owner is "DERPBot"
			);
			bool HumanClass = (
				owner is "ZombieStormtrooper" ||
				owner is "ZombieShotgunner" ||
				owner is "VulcanetteZombie" ||
				owner is "HDOperator"
			);
			bool OtherClass = (
				owner is "SatanRobo" ||
				owner is "Technorantula" ||
				owner is "TechnoSpider"
			);
			if (HumanClass) { offset = 8; heightfactor = 0.8; }
			else if (BotClass) {
				if (owner is "HERPBot") {
					modeLaser = 1;
					modeLight = 0;
					activated = true;
					offset = 8;
					heightfactor = 1.0;
				}
				if (owner is "DERPBot") {
					modeLaser = 0;
					modeLight = 1;
					activated = true;
					offset = 0;
					heightfactor = 1.0;
				}
			}
			else if (OtherClass) {
				modeLaser = 1;
				modeLight = 0;
				activated = true;
				offset = 16;
				if (owner is "SatanRobo") { heightfactor = 0.95; }
				else { heightfactor = 0.5; }
				//console.printf("setting on for otherclass");
			}

			bool isowneraiming = (
				owner.frame ==  4 || owner.frame ==  5 ||
				owner.frame == 23 || owner.frame == 24
			);

			// Handle random light movement
			// Disabling this as it ruins feedback to the player at distances
			// where seeing the laser would actually matter
			// if ((level.maptime % 10 == 0) && !(BotClass||OtherClass)) {
				// if (owner.target) {
					// angleoffset = frandom(-35, 35);
					// pitchoffset = frandom(-25, 25);
					// //if (!isowneraiming) { llm.pitchoffset += 10; }
				// }
				// else if (random(0, 1) == 0) {
					// angleoffset = frandom(-20, 20);
					// pitchoffset = frandom(-10, 10);
					// //if (!isowneraiming) { llm.pitchoffset += 20; }
				// }
			// }
			// no random light movement while incapacitated
			if (owner.InStateSequence(owner.CurState, owner.ResolveState("falldown"))) {
				angleoffset = 0;
				pitchoffset = 0;
			}
			// if (isowneraiming && mode == 3) {
				// angleoffset = 0;
				// pitchoffset = 0;
			// }

			double targetpitch = owner.pitch;
			if (owner.target) {
				targetpitch = owner.PitchTo(owner.target, zOfs: owner.height*heightfactor, targZOfs:owner.target.height/2);
				//console.printf(""..targetpitch);
			}

			newpos = owner.vec3Angle(
				offset * cos(-owner.pitch),
				owner.angle,
				offset * sin(-owner.pitch) + (owner.height * heightfactor));
			newangle = emitter.angle + (0.5 * deltaangle(emitter.angle, owner.angle + angleoffset));
			newpitch = emitter.pitch + (0.5 * deltaangle(emitter.pitch, targetpitch + pitchoffset));
		}
		emitter.setOrigin(newpos, true);
		emitter.A_SetAngle(newangle, true);
		emitter.A_SetPitch(newpitch, true);
		emitter.vel = owner.vel;
		emitter.source = self;
	}

	void Light(int mode) {
		switch (mode) {
			case 0:
				// if(fbounce) { fbounce.Destroy(); }
				emitter.Deactivate(self);
				return;
				break;
			case 1: emitter.IRMode(false); break;
			case 2: emitter.IRMode(true); break;
			case 3:
				if (level.maptime % 4 == 0) { emitter.Deactivate(self); return; }
				break;
		}

		bool ShowIR = false;
		if (players[consoleplayer].mo.checklocalview()) {
			PlayerPawn plr = players[consoleplayer].mo;
			PortableLiteAmp nvg = PortableLiteAmp(plr.FindInventory("PortableLiteAmp"));
			if (nvg && nvg.worn && nvg.amplitude > 0) { ShowIR = true; }
		}
		if (!ShowIR && mode == 2) {
			// if(fbounce) { fbounce.Destroy(); }
			emitter.Deactivate(self);
			return;
		}

		FLineTraceData flTrace;
		emitter.LineTrace(emitter.angle, 512, emitter.pitch, TRF_THRUACTORS, data: flTrace);
		emitter.Activate(self); // turn on dynlight

		//Bounce Light
		// if (!fbounce && owner is 'HDPlayerPawn') { fbounce = UaS_LLM_BounceLight(actor.spawn("UaS_LLM_BounceLight", flTrace.HitLocation, false)); }
		// if (fbounce) {
			// double bouncesize = sin(emitter.SpotOuterAngle) * flTrace.distance * 2;
			// fbounce.FlashlightType(bouncesize, max(flTrace.distance,1));
			// fbounce.SetOrigin(flTrace.HitLocation-flTrace.HitDir*10, true);
			// fbounce.source = self;
		// }

		// Draw flashlight particle beam
		if (!beams) { beams = CVar.GetCVar("UaS_FlashlightParticles", players[consoleplayer]); }
		if (beams.GetBool() == false || (ShowIR && owner == players[consoleplayer].mo)) { return; }
		int start = 1; //particle beam starts at emitter
		// if(owner.CheckLocalView()) { start = 8; } // unless local player
		if(owner is "DERPBot") { start = 4; } // Reduce beams on DERPs

		double startalpha = 0.75;
		if(owner.CheckLocalView()) { startalpha = .2; } // unless local player

		// Old angular vector of particle spawn
		vector3 oldpvec = (
			cos(lastpitch) * cos(lastangle),
			cos(lastpitch) * sin(lastangle),
			sin(-lastpitch));
		// New angular vector of particle spawn
		vector3 newpvec = (
			cos(emitter.pitch) * cos(emitter.angle),
			cos(emitter.pitch) * sin(emitter.angle),
			sin(-emitter.pitch));
		// Vector offset between old and new positions
		vector3 pold = level.vec3diff(emitter.pos, lastpos);
		// Velocity offset between old and new angular vectors
		vector3 pvoff = level.vec3diff(oldpvec,newpvec);

		FP.Style = Style_Add;
		FP.Color1 = "White";
		FP.Flags = SPF_FULLBRIGHT;
		FP.Lifetime = 1;
		FP.SizeStep = 0;
		FP.FadeStep = -1;
		FP.Texture = TexMan.CheckForTexture ("glstuff/glpart.png");
		for (double d = start; d < min(flTrace.distance,64); d = d + (d / 4)) {
			FP.Pos = emitter.pos + (oldpvec * d) + pold;
			FP.Vel = (pvoff * d) - pold;
			FP.StartAlpha = (startalpha*0.75) / (d);
			FP.Size = (sin(emitter.SpotOuterAngle) * d) * 6;
			Level.SpawnParticle(FP);
			// tighter "beam" particle as well
			FP.StartAlpha = (startalpha) / (d);
			FP.Size = (sin(emitter.SpotInnerAngle*0.5) * d) * 8;
			Level.SpawnParticle(FP);
		}

	}

	void Laser(int mode) {
		LP.Style = STYLE_Add;
		LP.Color1 = LaserColor;
		LP.Lifetime = 1;
		LP.SizeStep = 0;
		LP.FadeStep = -1;
		LP.Flags = SPF_FULLBRIGHT|SPF_REPLACE;
		LP.Texture = TexMan.CheckForTexture ("glstuff/glpart.png");

		switch (mode) {
			case 0: if(lbounce) { lbounce.Destroy(); } return; break;
			case 1: LaserAlpha = 1.0; break;
			case 2: LaserAlpha = 0.0; break;
		}

		// Enemies use red lasers
		// Friends use green lasers
		if (owner.bISMONSTER) {
			if (!owner.bFRIENDLY) { LP.Color1 = "FF 00 00"; }
			else { LP.Color1 = "50 FF 00"; }
		}

		// Make laser particles larger for players wearing NVGs, and IR lasers visible
		double sizefactor = 1;
		if (owner is 'HDPlayerPawn') { sizefactor = 0.5; }
		if (players[consoleplayer].mo.checklocalview()) {
			PlayerPawn plr = players[consoleplayer].mo;
			PortableLiteAmp nvg = PortableLiteAmp(plr.FindInventory("PortableLiteAmp"));
			if (nvg && nvg.worn) {
				//sizefactor *= clamp(nvg.amplitude * 0.1, 1, 3);
				if (nvg.amplitude > 0) { LaserAlpha = 1.0; }
			}
		}

		// Trace path data for laser particle beam
		FLineTraceData laserTrace;
		emitter.LineTrace(emitter.angle, 16384, emitter.pitch, offsetforward:8, data: laserTrace);
		if (laserTrace.distance<1) { emitter.LineTrace(emitter.angle, 16384, emitter.pitch, flags: TRF_THRUACTORS, offsetforward:8, data: laserTrace); }

		// precalculate position and velocity vectors only once
		// hopefully moving these out of the loop improves performance
		// Old angular vector of particle spawn
		vector3 oldpvec = (
			cos(lastpitch) * cos(lastangle),
			cos(lastpitch) * sin(lastangle),
			sin(-lastpitch));
		// New angular vector of particle spawn
		vector3 newpvec = (
			cos(emitter.pitch) * cos(emitter.angle),
			cos(emitter.pitch) * sin(emitter.angle),
			sin(-emitter.pitch));
		// Vector offset between old and new positions
		vector3 pold = level.vec3diff(emitter.pos, lastpos);
		// Velocity offset between old and new angular vectors
		vector3 pvoff = level.vec3diff(oldpvec,newpvec);

		// int pspawns = 0;
		double incr=0.1;
		for (double f = 0; f <= laserTrace.distance-laserTrace.HitDir.length(); f = f + incr) {
			LP.Pos = emitter.pos + (oldpvec * f) + pold;
			LP.Vel = (pvoff * f) - pold;
			LP.Size = sizefactor * frandom[llm](0.75,1.25);

			// Increase density at ends
			incr = sin((f/laserTrace.distance)*180)*(laserTrace.distance*0.0075);
			incr = clamp(incr, 0.1, 1000);
			incr *= frandom[llm](0.1,2);

			// Calculate simulated atmospheric density (pseudo-perlin?)
			// https://www.desmos.com/calculator/ihnnq7pdjt
			double alph = (
				(sin(LP.Pos.X) + sin(LP.Pos.Y) + sin(LP.Pos.Z)) +
				(sin(LP.Pos.X*10) + sin(LP.Pos.Y*10) + sin(LP.Pos.Z*10)) +
				(sin(LP.Pos.X*.5) + sin(LP.Pos.Y*.1) + sin(LP.Pos.Z*.5)) +
				sin(f+getage()));
			alph += max(1-incr,0);
			alph = clamp(alph, 0, 1);

			// actually spawn particle
			LP.StartAlpha = alph * LaserAlpha;
			Level.SpawnParticle(LP);
			// pspawns++;
		}
		LP.Size = 1; LP.StartAlpha = 1*LaserAlpha; Level.SpawnParticle(LP);
		LP.Size *= 4; LP.StartAlpha = 0.25*LaserAlpha; Level.SpawnParticle(LP);
		LP.Size *= 4; LP.StartAlpha = 0.125*LaserAlpha; Level.SpawnParticle(LP);
		// console.printf("particles "..pspawns);

		//Bounce Light
		if (!lbounce && owner is 'HDPlayerPawn') { lbounce = UaS_LLM_BounceLight(actor.spawn("UaS_LLM_BounceLight", laserTrace.HitLocation, false)); }
		if (lbounce) {
			lbounce.LaserType(color(int(LaserAlpha*255),LaserColor.r,LaserColor.g,LaserColor.b));
			lbounce.SetOrigin(laserTrace.HitLocation-laserTrace.HitDir*5, true);
			lbounce.source = self;
		}
	}

	//override int getsbarnum(int flags){ return mode; }

	override inventory CreateTossable(int amt) {
		if(lbounce) { lbounce.destroy(); }
		if(emitter) { emitter.destroy(); }
		return super.CreateTossable(amt);
	}

	override void actualpickup(actor other) {
		super.actualpickup(other);
		GetDefaults(other, 0);
	}

	void GetDefaults(actor p, int t = 0) {
		if (!p) { return; }
		if (!(p is 'HDPlayerPawn')) { return; }
		if (!laserpref) { laserpref = CVar.GetCVar("UaS_LLM_LaserMode", p.player); }
		if (!lightpref) { lightpref = CVar.GetCVar("UaS_LLM_LightMode", p.player); }
		if (!lasercolorpref) { lasercolorpref = CVar.GetCVar("UaS_LLM_LaserColor", p.player); }
		switch (t) {
			case 0: // All
				modeLaser = laserpref.GetInt();
				modeLight = lightpref.GetInt();
				LaserColor = lasercolorpref.GetString();
				break;
			case 1: // Laser Only
				LaserColor = lasercolorpref.GetString();
				break;
		}
	}
}

class UaS_LLM_Emitter : DynamicLight {
	UaS_LaserLightModule source;
	default {
		DynamicLight.Type "Point";
		+DYNAMICLIGHT.ATTENUATE;
		+DYNAMICLIGHT.SPOT;
		radius 1;
		height 1;
	}

	override void PostBeginPlay() {
		super.PostBeginPlay();
		Deactivate(self);
		args[DynamicLight.LIGHT_RED] = 255;
		args[DynamicLight.LIGHT_GREEN] = 255;
		args[DynamicLight.LIGHT_BLUE] = 255;
		args[DynamicLight.LIGHT_INTENSITY] = 128;
		SpotInnerAngle = 5;
		SpotOuterAngle = 20;
		if (!source) { return; }
		if (!source.owner) { return; }
		if (source.owner is 'HDPlayerPawn') { args[DynamicLight.LIGHT_INTENSITY] = 255; }
	}

	void IRMode(bool on) {
		if (on) {
			args[DynamicLight.LIGHT_RED] = 64;
			args[DynamicLight.LIGHT_GREEN] = 63;
			args[DynamicLight.LIGHT_BLUE] = 62;
			args[DynamicLight.LIGHT_INTENSITY] = 384;
			SpotInnerAngle = 5;
			SpotOuterAngle = 8;
		}
		else {
			args[DynamicLight.LIGHT_RED] = 255;
			args[DynamicLight.LIGHT_GREEN] = 255;
			args[DynamicLight.LIGHT_BLUE] = 255;
			args[DynamicLight.LIGHT_INTENSITY] = 128;
			SpotInnerAngle = 5;
			SpotOuterAngle = 20;
			if (!source) { return; }
			if (!source.owner) { return; }
			if (source.owner is 'HDPlayerPawn') { args[DynamicLight.LIGHT_INTENSITY] = 255; }
		}
	}

	override void Tick() {
		super.tick();
		if (!source) Destroy();
	}
}

class UaS_LLM_BounceLight : DynamicLight {
	UaS_LaserLightModule source;
	default {
		DynamicLight.Type "Point";
		+DYNAMICLIGHT.ATTENUATE;
		radius 1;
		height 1;
	}

	override void PostBeginPlay() {
		super.PostBeginPlay();
		Deactivate(self);
	}

	void LaserType(color lc) {
		args[DynamicLight.LIGHT_RED] = lc.r;
		args[DynamicLight.LIGHT_GREEN] = lc.g;
		args[DynamicLight.LIGHT_BLUE] = lc.b;
		args[DynamicLight.LIGHT_INTENSITY] = int(lc.a/32);
		Activate(self);
	}

	void FlashlightType(double size, double distance) {
		args[DynamicLight.LIGHT_RED] = int(256*((512-distance)/512));
		args[DynamicLight.LIGHT_GREEN] = int(256*((512-distance)/512));
		args[DynamicLight.LIGHT_BLUE] = int(256*((512-distance)/512));
		args[DynamicLight.LIGHT_INTENSITY] = 128;
		Activate(self);
		// console.printf("size %i, color %i, distance %i",args[DynamicLight.LIGHT_INTENSITY],args[DynamicLight.LIGHT_RED], distance);
	}

	override void Tick() {
		super.tick();
		if (!source) Destroy();
	}
}
