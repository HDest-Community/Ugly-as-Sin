extend class UaS_AI_Handler {
	int	recheck;
	bool flashing;
	int prefmode;

	void Flashlight() {
		if (owner.isFrozen() || level.isFrozen()) { return; }
		if (!UaS_AI_Flashlights) { UaS.SendIntent("LLM_Toggle", "Off", owner); return; }
		// Only do light for human-type classes and robots
		bool BotClass = (
			owner is "HERPBot" ||
			owner is "DERPBot"
		);
		bool HumanClass = (
			owner is "ZombieStormtrooper" ||
			owner is "ZombieShotgunner" ||
			owner is "VulcanetteZombie" ||
			owner is "HDOperator"
		);
		if (!BotClass && !HumanClass) { return; }

		string flc = "UaS_LaserLightModule";
		UaS_LaserLightModule LLM = UaS_LaserLightModule(owner.FindInventory(flc));
		if (!LLM) {
			owner.giveinventory(flc, 1);
			LLM = UaS_LaserLightModule(owner.FindInventory(flc));
		}

		bool isowneraiming = (
			owner.frame ==  4 || owner.frame ==  5 ||
			owner.frame == 23 || owner.frame == 24
		);

		flashing = (
			owner.target &&
			isowneraiming &&
			!BotClass
		);

		if (HumanClass && recheck <= 0) {
			// sample light from ahead of monster
			FLineTraceData lookSpot;
			owner.LineTrace(owner.angle, 256, owner.pitch, TRF_THRUACTORS, owner.height * 0.75, data: lookSpot);
			int lightlevel = int(lookSpot.HitSector.LightLevel + owner.cursector.lightlevel) / 2;

			if (owner.InStateSequence(owner.CurState, owner.ResolveState("falldown"))) { // don't run the normal check logic if we're incapacitated
				if (LLM.activated && UaS.RandomChance(UaS_AI_PlayDead)) {
					UaS.SendIntent("LLM_Toggle", "Off", owner);
				}
			} else {
				// More likely to activate in darker areas
				if (random[aillm](0,192) > lightlevel) { UaS.SendIntent("LLM_Toggle", "On", owner); }
				else { UaS.SendIntent("LLM_Toggle", "Off", owner); }
			}

			// misc other adjustments
			recheck = max(random[aillm](35, 175), lightlevel); // recheck more often in darker areas
			if (random[aillm](0,1) > 0.75) { prefmode = random[aillm](0,2); }
			if (random[aillm](0,128) > lightlevel) { prefmode = random[aillm](0,2); }
			if (flashing) { UaS.SendIntent("LLM_ModeSwitch", "3", owner); }
			else { UaS.SendIntent("LLM_ModeSwitch", string.format("%i",prefmode), owner); }
		}

		/*
		// Handle random light movement
		if ((level.maptime % 10 == 0) && !BotClass) {
			if (owner.target && !(owner.target is "UaS_LastKnownMarker")) {
				llm.angleoffset = frandom[ai](-35, 35);
				llm.pitchoffset = frandom[ai](-25, 25);
				//if (!isowneraiming) { llm.pitchoffset += 10; }
			}
			else if (random[ai](0, 1) == 0) {
				llm.angleoffset = frandom[ai](-20, 20);
				llm.pitchoffset = frandom[ai](-10, 10);
				//if (!isowneraiming) { llm.pitchoffset += 20; }
			}
		}
		if (isowneraiming && flashing) {
			llm.angleoffset = 0;
			llm.pitchoffset = 0;
		}*/

		recheck--;
	}
}
