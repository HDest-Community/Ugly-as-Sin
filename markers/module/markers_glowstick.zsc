const UAS_HDLD_GLOWSTICK = "gls";

class UaS_Glowstick : UaS_Marker {
	DynamicLight GlowLight;
	// int spindir;

	Default {
		Inventory.PickupMessage "$PICKUP_GLOWSTICK";
		Inventory.Icon "UGSIB0";
		tag "$TAG_GLOWSTICK";
		HDPickup.refid UAS_HDLD_GLOWSTICK;
		UaS_Marker.UseSound "UaS/Glowstick";
	}

	override void HandleAttachedLight() {
		if(Activated) {
			frame = 2;
			if (level.maptime % 5 == 0) { brightness = min(brightness + 1, 64); }
			if (level.maptime % 700 == 0) { age++; }
			if (!GlowLight) {
				GlowLight = DynamicLight(Actor.Spawn("UaS_GlowstickLight"));
				GlowLight.args[DynamicLight.LIGHT_RED] = 32;
				GlowLight.args[DynamicLight.LIGHT_GREEN] = 128;
				GlowLight.args[DynamicLight.LIGHT_BLUE] = 32;
			}
			GlowLight.args[DynamicLight.LIGHT_INTENSITY] = (brightness - age);
			GlowLight.target = self;
			bFitsInBackpack = false;
		}
		else {
			frame = 1;
			if (GlowLight) { glowLight.Destroy(); }
			brightness = 0;
			age = 0;
			bFitsInBackpack = true;
		}

		// Use up when dead?
		if (Activated && (brightness - age) < 0) {
			if (GlowLight) { glowLight.Destroy(); }
		}

		//A_SetAngle(angle + vel.length() * 3 * spindir);
	}

	states {
		Spawn:
			UGSI B -1;
			stop;
	}
}

class UaS_GlowstickLight : DynamicLight {
	override void Tick() {
		super.Tick();
		if (target) {
			SetOrigin((target.pos.x, target.pos.y, target.pos.z + target.height/2), true);
			Prev = target.Prev;
		}
	}
}
