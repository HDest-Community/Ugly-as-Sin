extend class UaS_AI_Handler {
	int	recheck;
	bool flashing;
	int prefmode;
	string toggleintent;

	void Flashlight() {
		if (owner.isFrozen() || level.isFrozen()) { return; }
		if (!UaS_AI_Flashlights) { UaS.SendIntent("LLM_Toggle", "Off", owner); return; }
		// Do light for any "hitscan" type enemies
		bool BotClass = (
			owner is "HERPBot" ||
			owner is "DERPBot"
		);
		bool HumanClass = (
			owner is "ZombieStormtrooper" ||
			owner is "ZombieShotgunner" ||
			owner is "VulcanetteZombie" ||
			owner is "HDOperator"
		);
		bool OtherClass = (
			owner is "SatanRobo" ||
			owner is "Spiderdemon" ||
			owner is "Manticore"
		);
		if (!(BotClass || HumanClass || OtherClass)) { return; }

		string flc = "UaS_LaserLightModule";
		if (!owner.FindInventory(flc)) {
			owner.giveinventory(flc, 1);
			UaS.LogDebug(DBG_AI, "Gave LLM to"..owner.GetClassName());
		}

		bool isowneraiming = (
			owner.frame ==  4 || owner.frame ==  5 ||
			owner.frame == 23 || owner.frame == 24
		);

		flashing = (
			owner.target &&
			isowneraiming &&
			!BotClass
		);

		if (HumanClass) {
			if (recheck <=0) {
				// sample light from ahead of monster
				FLineTraceData lookSpot;
				owner.LineTrace(owner.angle, 256, owner.pitch, TRF_THRUACTORS, owner.height * 0.75, data: lookSpot);
				int lightlevel = int(lookSpot.HitSector.LightLevel + owner.cursector.lightlevel) / 2;

				if (owner.InStateSequence(owner.CurState, owner.ResolveState("falldown"))) { // don't run the normal check logic if we're incapacitated
					if (frandom[aillm](0,1) > UaS_AI_PlayDead) {
						toggleintent = "On";
					}
				} else {
					// More likely to activate in darker areas
					if (random[aillm](0,256) > lightlevel) { toggleintent = "On"; }
					else { toggleintent = "Off"; }
				}

				// misc other adjustments
				recheck = max(random[aillm](35, 128), lightlevel); // recheck more often in darker areas
				prefmode = randompick[aillm](0,0,0,1,2);
			}
			// Force on if the monster is aiming at the player
			if (isowneraiming) {
				if (owner.target && (owner.CheckSight(owner.target) || frandom[aillm](0,1) < 0.25)) {
					toggleintent = "On";
					prefmode = clamp(prefmode,1,2);
				}
				else if (frandom[aillm](0,1) > 0.5) {
					toggleintent = "On";
				}
				recheck = 10;
			}
			//if (flashing) { UaS.SendIntent("LLM_ModeSwitch", "3", owner); }
			UaS.SendIntent("LLM_ModeSwitch", string.format("%i",prefmode), owner);
			UaS.SendIntent("LLM_Toggle", toggleintent, owner);
		}

		recheck--;
	}
}
