extend class UaS_TraumaKit {
	override void DrawHUDStuff(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl) {
		if (!mti.patient) return;
		// Floats for precision (also required for centering)
		Vector2 hudScale = (UaS_TraumaKit_HUDScale, UaS_TraumaKit_HUDScale);
		float textHeight = sb.pSmallFont.mFont.GetHeight() * hudscale.y;
		float padding = 2 * hudscale.y;
		float padStep = textHeight + padding;
		float halfStep = padStep / 2;
		float baseOffset = (-7 * textHeight) + (-3 * padding); // Start calculating from center of screen?

		// Header
		sb.DrawString(
			sb.pSmallFont,
			Stringtable.Localize("$UI_TRK_TITLE"),
			(0, baseOffset),
			sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_CENTER,
			Font.CR_GRAY,
			scale: hudscale
		);
		sb.DrawString(
			sb.pSmallFont,
			Stringtable.Localize("$UI_TRK_TREATING") .. mti.patient.player.GetUsername(),
			(0, baseOffset + textHeight),
			sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_CENTER,
			Font.CR_GRAY,
			scale: hudscale
		);

		// Wound List
		int woundListOffsetX = -12;
		float woundListOffsetY = baseOffset + (3 * textHeight) + (3 * padStep);

		if (mti.wh.critWounds.Size() == 0) {
			sb.DrawString(
				sb.pSmallFont,
				Stringtable.Localize("$UI_TRK_NOTREATABLE"),
				(0, woundListOffsetY),
				sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_CENTER,
				Font.CR_GRAY,
				scale: hudscale
			);
		} else {
			Array<string> wounds;
			int idx = (mti.currentWound)? mti.currentWoundIdx : 0;
			int loopMin = Min(idx - 2, mti.wh.critWounds.Size() - 5);
			int loopMax = Max(idx + 2, 4);

			// Compile list
			for (int i = loopMin; i <= loopMax; i++) {
				if (
					i < 0
					|| i > mti.wh.critWounds.Size() - 1
					|| !mti.wh.critWounds[i]
				) { continue; }

				string textColor;
				bool selected = (mti.currentWound && i == idx);
				if (mti.wh.critWounds[i].avgstat >= 15) {
					textColor = Stringtable.Localize("$UI_TRK_"..((selected)? "RED" : "DARKRED"));
				} else {
					textColor = Stringtable.Localize("$UI_TRK_"..((selected)? "GREEN" : "DARKGREEN"));
				}

				string pointer = Stringtable.Localize("$UI_TRK_"..((selected)? "SELECTED" : "NOTSELECTED"));
				wounds.push(textColor..mti.wh.critWounds[i].description..pointer);
				woundListOffsetY -= halfStep;
			}
			woundListOffsetY += halfStep; // accommodation

			// Top overflow dot
			if (loopMin > 0) {
				sb.DrawString(
					sb.pSmallFont,
					Stringtable.Localize("$UI_TRK_TOPOVERFLOWDOTS"),
					(woundListOffsetX, woundListOffsetY - padStep),
					sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_RIGHT,
					Font.CR_GRAY,
					scale: hudscale
				);
			}

			// The actual list
			for (int i = 0; i < wounds.Size(); i++) {
				sb.DrawString(
					sb.pSmallFont,
					wounds[i],
					(woundListOffsetX, woundListOffsetY),
					sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_RIGHT,
					scale: hudscale
				);

				woundListOffsetY += padStep;
			}

			// Bottom overflow dot
			if (loopMax < mti.wh.critWounds.Size() - 1) {
				sb.DrawString(
					sb.pSmallFont,
					Stringtable.Localize("$UI_TRK_BOTTOMOVERFLOWDOTS"),
					(woundListOffsetX, woundListOffsetY),
					sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_RIGHT,
					Font.CR_GRAY,
					scale: hudscale
				);
			}
		}

		// Wound info
		int woundInfoOffsetX = 12;
		float woundInfoOffsetY = baseOffset + (3 * textHeight) + (3 * padStep);
		Array<string> status;
		if (mti.currentWound) {
			if (mti.currentWound.open <= 0.) {
				status.Push(mti.GetOpenStatus(mti.currentWound));
			}
			else if (mti.currentWound.patched > 0.) {
				status.Push(mti.GetOpenStatus(mti.currentWound));
				status.Push(mti.GetStabilityStatus(mti.currentWound));
				woundInfoOffsetY -= halfStep;
			}
			else {
				status.Push(mti.GetOpenStatus(mti.currentWound));

				string tmpStr;

				// Painkillers
				tmpStr = "$UI_TRK_PAINKILLERS_NOTNUMBED";
				if (mti.currentWound.painkiller >= 75) tmpStr = "$UI_TRK_PAINKILLERS_NUMBED";
				else if (mti.currentWound.painkiller >= 50) tmpStr = "$UI_TRK_PAINKILLERS_MOSTLYNUMBED";
				else if (mti.currentWound.painkiller >= 25) tmpStr = "$UI_TRK_PAINKILLERS_SOMEWHATNUMBED";

				status.Push(String.Format(Stringtable.Localize(tmpStr), mti.GetStatusColor(100 - mti.currentWound.painkiller)));
				woundInfoOffsetY -= halfStep;

				// Dirty
				if (mti.currentWound.dirty >= 0) {
					tmpStr = "$UI_TRK_DIRTINESS_CLEAN";
					if (mti.currentWound.dirty >= 65) { tmpStr = "$UI_TRK_DIRTINESS_FILTHY"; }
					else if (mti.currentWound.dirty >= 55) { tmpStr = "$UI_TRK_DIRTINESS_VERYDIRTY"; }
					else if (mti.currentWound.dirty >= 45) { tmpStr = "$UI_TRK_DIRTINESS_SOMEWHATDIRTY"; }
					else if (mti.currentWound.dirty >= 35) { tmpStr = "$UI_TRK_DIRTINESS_ABITDIRTY"; }
					else if (mti.currentWound.dirty >= 25) { tmpStr = "$UI_TRK_DIRTINESS_ALMOSTCLEAN"; }
					else if (mti.currentWound.dirty >= 15) { tmpStr = "$UI_TRK_DIRTINESS_ACCEPTABLYCLEAN"; }

					status.Push(String.Format(Stringtable.Localize(tmpStr), mti.GetStatusColor(mti.currentWound.dirty)));
					woundInfoOffsetY -= halfStep;
				}

				// Obstructions
				if (mti.currentWound.obstructed >= 0) {
					tmpStr = "$UI_TRK_OBSTRUCTIONS_NONE";
					if (mti.currentWound.obstructed >= 55) { tmpStr = "$UI_TRK_OBSTRUCTIONS_MANY"; }
					else if (mti.currentWound.obstructed >= 45) { tmpStr = "$UI_TRK_OBSTRUCTIONS_SEVERAL"; }
					else if (mti.currentWound.obstructed >= 35) { tmpStr = "$UI_TRK_OBSTRUCTIONS_AFEW"; }
					else if (mti.currentWound.obstructed >= 25) { tmpStr = "$UI_TRK_OBSTRUCTIONS_SOME"; }
					else if (mti.currentWound.obstructed >= 15) { tmpStr = "$UI_TRK_OBSTRUCTIONS_VERYFEW"; }

					status.Push(String.Format(Stringtable.Localize(tmpStr), mti.GetStatusColor(mti.currentWound.obstructed)));
					woundInfoOffsetY -= halfStep;
				}

				// Cavity
				if (mti.currentWound.cavity >= 0) {
					tmpStr = "$UI_TRK_CAVITY_NODAMAGE";
					if (mti.currentWound.cavity >= 12.0) { tmpStr = "$UI_TRK_CAVITY_SEVEREDAMAGE"; }
					else if (mti.currentWound.cavity >= 8.5) { tmpStr = "$UI_TRK_CAVITY_SIGNIFICANTDAMAGE"; }
					else if (mti.currentWound.cavity >= 5.0) { tmpStr = "$UI_TRK_CAVITY_MODERATEDAMAGE"; }
					else if (mti.currentWound.cavity >= 2.5) { tmpStr = "$UI_TRK_CAVITY_SOMEDAMAGE"; }
					else if (mti.currentWound.cavity >= 1.0) { tmpStr = "$UI_TRK_CAVITY_LITTLEDAMAGE"; }

					status.Push(String.Format(Stringtable.Localize(tmpStr), mti.GetStatusColor(mti.currentWound.cavity / 12 * 100)));
					woundInfoOffsetY -= halfStep;
				}
			}

			for (int i = 0; i < status.Size(); i++) {
				sb.DrawString(
					sb.pSmallFont,
					status[i],
					(woundInfoOffsetX, woundInfoOffsetY),
					sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT,
					Font.CR_GRAY,
					scale: hudscale
				);

				woundInfoOffsetY += padStep;
			}
		} else if (mti.wh.critWounds.Size() > 0) {
			sb.DrawString(
				sb.pSmallFont,
				Stringtable.Localize("$UI_TRK_NOWOUNDSELECTED"),
				(woundInfoOffsetX, woundInfoOffsetY),
				sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT,
				Font.CR_DARKGRAY,
				scale: hudscale
			);
		}

		// Tool list
		float toolListSpacing = 24 * hudscale.x;
		float toolListOffsetX = toolListSpacing * -3;
		float toolListOffsetY = baseOffset + (4 * textHeight) + (7 * padStep);
		Array<String> toolIcons;
		for (int i = 0; i <= T_SCALPEL; i++) {
			string toolName = String.Format(
				Stringtable.Localize("$UI_TRK_TOOLLIST_FORMATTING"),
				(i == weaponstatus[TK_SELECTED])? Stringtable.Localize("$UI_TRK_TOOLLIST_WHITE") : Stringtable.Localize("$UI_TRK_TOOLLIST_DARKGREY") , toolListNames[i]
			);
			float alpha = (i == weaponstatus[TK_SELECTED])? 0.75 : 0.50;

			toolIcons.Push(toolListIcons[i]);
			sb.DrawImage(
				toolListIcons[i],
				(toolListOffsetX, toolListOffsetY),
				sb.DI_SCREEN_CENTER | sb.DI_ITEM_CENTER,
				alpha,
				scale: hudscale
			);
			sb.DrawString(
				sb.pSmallFont,
				toolName,
				(toolListOffsetX, toolListOffsetY),
				sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_CENTER,
				alpha: alpha,
				scale: hudscale
			);

			toolListOffsetX += toolListSpacing;
		}

		// Tool info
		float toolInfoOffset = baseOffset + (4 * textHeight) + (8 * padStep);
		Array<string> trueStatusMessage;
		statusMessage.Split(trueStatusMessage, Stringtable.Localize("$UI_TRK_TOOLLIST_NEWLINE")); // it just works | Even betterer - [Ted]

		for (int i = 0; i < trueStatusMessage.Size(); i++) {
			sb.DrawString(
				sb.pSmallFont,
				trueStatusMessage[i],
				(0, toolInfoOffset),
				sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_CENTER,
				scale: hudscale
			);

			toolInfoOffset += textHeight;
		}


		// wheel stuff
		/*
		if (
			!mti.UaS_Medical_SwitchFiremode
			|| !mti.UaS_Medical_SwitchFiremode.GetBool()
			|| !(hpl.Player.cmd.Buttons & BT_FIREMODE)
			|| !wheel
		) { return; }

		wheel.DrawWheel(
			weaponstatus[TK_SELECTED],
			7,
			toolIcons,
			(Screen.GetWidth() / 2, Screen.GetHeight() / 2)
		);
		*/
	}

	static const string[] toolListNames = { "AT", "SL", "FC", "BF", "SP", "ST", "SC" };
	static const string[] toolListIcons = { "ANESTH", "SALINE", "FORCEPS", "BIOFOAM", "STAPLER", "SUTURE", "SCALPEL" };
}
