// Wounded debuffs
extend class UaS_AI_Handler {
	int baseHealth;
	double healthFactor;
	double baseSpeed;
	int painCountdown;

	void WoundDebuffInit() {
		baseHealth = max(1, owner.health);
		baseSpeed = owner.speed;
	}

	void WoundDebuff() {
		if(!UaS_AI_Wounding) { return; }
		if(!owner || owner.health <= 0 ) { return; }
		if(owner.health < baseHealth) {
			// Calculate health factor
			healthFactor = owner.health / double(baseHealth / 2);
			healthFactor = clamp(healthFactor, 0.1, 1.0);

			// Reduce speed
			owner.speed = baseSpeed * healthFactor;

			// Jitter angle / pitch
			owner.A_SetAngle(owner.angle + (random[ai](-6, 6) * (1.0 - healthFactor)), SPF_INTERPOLATE);
			owner.A_SetPitch(owner.pitch + (random[ai](-6, 6) * (1.0 - healthFactor)), SPF_INTERPOLATE|SPF_FORCECLAMP);

			// Occasionally cry out in pain and select a random fear state
			// (more likely to be frightened the lower heathFactor is)
			if(painCountdown == 0) {
				owner.A_Pain();
				if(UaS.randomChance(1.0 - healthFactor)) { owner.bFRIGHTENED = true; }
				else { owner.bFRIGHTENED = false; }
				painCountDown = random[ai](10, 20) * 35 * healthFactor;
			}
			painCountdown = max(painCountDown - 1, 0);

			if(level.maptime % 35 == 1 && UaS_Debug & AI) { console.printf(owner.GetClassName().." health factor"..healthFactor); }
		}
	}
}
