class UaS_LootEntry {
	string LootableClassName;
	array<string> LootClasses;
}

class UaS_LootList : Thinker {
	array<UaS_LootEntry> LootList;
	array<string> InvalidClasses;

	void InitLootTables() {
		// Get lump string array and make a copy
		UaS u = UaS(EventHandler.Find("UaS"));
		array<string> TempUASINFO;
		TempUASINFO.Copy(u.UASINFOLump);
		// find relevant lines and extract data
		for (int i = 0; i < TempUASINFO.size(); i++) {
			string tl = TempUASINFO[i].MakeLower(); // templine
			if (tl.IndexOf("looting") != -1) {
				tl.replace("looting:", "");
				int sepindex = tl.IndexOf(":");
				string cname = tl.Left(sepindex);
				string loots = tl.Mid(sepindex+1);
				array<string> templootlist;
				loots.Split(templootlist, ",", TOK_SKIPEMPTY);
				UaS_LootEntry lt = new("UaS_LootEntry");
				lt.LootableClassName = cname;
				for (int j = 0; j < templootlist.Size(); j++) {
					int x = templootlist[j].IndexOf("*");
					if (x != -1) {
						string tli = templootlist[j].Left(x);
						string tlm = templootlist[j].Mid(x+1);
						if (!CheckValidClass(tli)) { continue; }
						int mul = tlm.ToInt(10);
						for (int k = 0; k < mul; k++) { lt.LootClasses.push(tli); }
					}
					else {
						if (!CheckValidClass(templootlist[j])) { continue; }
						lt.LootClasses.push(templootlist[j]);
					}
				}
				LootList.push(lt);
			}
		}
		if(UaS_Debug & DBG_Looting) {
			console.printf("---===Init all loot tables===---");
			foreach (lt : LootList) {
				let entry = UaS_LootEntry(lt);
				console.printf("==="..entry.LootableClassName.."===");
				foreach (cls : entry.LootClasses) { console.printf(cls); }
			}
			if (InvalidClasses.size() > 0) {
				console.printf("---===Invalid loot classes===---");
				foreach (cls : InvalidClasses) { console.printf(cls); }
			}
		}
	}

	bool CheckValidClass(string tocheck) {
		foreach (cls : allClasses) {
			string existing = cls.GetClassName();
			if (tocheck ~== existing) return true;
		}
		InvalidClasses.push(tocheck);
		return false;
	}

	string GetLootItem(actor checkclass) {
		array<string> PossibleItems;
		string checkname = checkclass.GetClassName();
		foreach (lt : LootList) {
			if (checkname ~== lt.LootableClassName || checkclass is lt.LootableClassName) {
				PossibleItems.append(lt.LootClasses);
			}
		}
		if (PossibleItems.size() > 0) { return PossibleItems[random(0,PossibleItems.size()-1)]; }
		return "";
	}

	static UaS_LootList get() {
		UaS_LootList ltl = null;
		thinkeriterator it = thinkeriterator.create("UaS_LootList");
		while(ltl = UaS_LootList(it.next())){
			if(ltl)break;
		}
		if(!ltl){
			ltl=new("UaS_LootList");
			ltl.InitLootTables();
		}
		return ltl;
	}
}
